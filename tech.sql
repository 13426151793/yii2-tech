-- MySQL dump 10.13  Distrib 5.7.16, for Linux (x86_64)
--
-- Host: localhost    Database: tech
-- ------------------------------------------------------
-- Server version	5.7.16

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `auth_assignment`
--

DROP TABLE IF EXISTS `auth_assignment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_assignment` (
  `item_name` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `user_id` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` int(11) DEFAULT NULL,
  PRIMARY KEY (`item_name`,`user_id`),
  CONSTRAINT `auth_assignment_ibfk_1` FOREIGN KEY (`item_name`) REFERENCES `auth_item` (`name`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_assignment`
--

LOCK TABLES `auth_assignment` WRITE;
/*!40000 ALTER TABLE `auth_assignment` DISABLE KEYS */;
INSERT INTO `auth_assignment` VALUES ('rd','1',1481719101);
/*!40000 ALTER TABLE `auth_assignment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_item`
--

DROP TABLE IF EXISTS `auth_item`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_item` (
  `name` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `type` int(11) NOT NULL,
  `description` text COLLATE utf8_unicode_ci,
  `rule_name` varchar(64) COLLATE utf8_unicode_ci DEFAULT NULL,
  `data` text COLLATE utf8_unicode_ci,
  `created_at` int(11) DEFAULT NULL,
  `updated_at` int(11) DEFAULT NULL,
  PRIMARY KEY (`name`),
  KEY `rule_name` (`rule_name`),
  KEY `idx-auth_item-type` (`type`),
  CONSTRAINT `auth_item_ibfk_1` FOREIGN KEY (`rule_name`) REFERENCES `auth_rule` (`name`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_item`
--

LOCK TABLES `auth_item` WRITE;
/*!40000 ALTER TABLE `auth_item` DISABLE KEYS */;
INSERT INTO `auth_item` VALUES ('/blog/*',2,NULL,NULL,NULL,1481719126,1481719126),('rd',1,'Research & Development','BlogRule',NULL,1481719059,1481719059);
/*!40000 ALTER TABLE `auth_item` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_item_child`
--

DROP TABLE IF EXISTS `auth_item_child`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_item_child` (
  `parent` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `child` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`parent`,`child`),
  KEY `child` (`child`),
  CONSTRAINT `auth_item_child_ibfk_1` FOREIGN KEY (`parent`) REFERENCES `auth_item` (`name`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `auth_item_child_ibfk_2` FOREIGN KEY (`child`) REFERENCES `auth_item` (`name`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_item_child`
--

LOCK TABLES `auth_item_child` WRITE;
/*!40000 ALTER TABLE `auth_item_child` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_item_child` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_rule`
--

DROP TABLE IF EXISTS `auth_rule`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_rule` (
  `name` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `data` text COLLATE utf8_unicode_ci,
  `created_at` int(11) DEFAULT NULL,
  `updated_at` int(11) DEFAULT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_rule`
--

LOCK TABLES `auth_rule` WRITE;
/*!40000 ALTER TABLE `auth_rule` DISABLE KEYS */;
INSERT INTO `auth_rule` VALUES ('BlogRule','O:22:\"backend\\rules\\BlogRule\":3:{s:4:\"name\";s:8:\"BlogRule\";s:9:\"createdAt\";i:1481719025;s:9:\"updatedAt\";i:1481719025;}',1481719025,1481719025);
/*!40000 ALTER TABLE `auth_rule` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog`
--

DROP TABLE IF EXISTS `blog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `userid` int(10) unsigned NOT NULL DEFAULT '0',
  `views` int(10) unsigned NOT NULL DEFAULT '0',
  `title` varchar(64) NOT NULL DEFAULT '' COMMENT '标题',
  `content` text NOT NULL COMMENT '内容',
  `addtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `modtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '修改时间',
  `status` tinyint(4) unsigned NOT NULL DEFAULT '0' COMMENT '状态',
  `attr` varchar(1024) NOT NULL DEFAULT '0' COMMENT '备注信息',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8 COMMENT='博客积累';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog`
--

LOCK TABLES `blog` WRITE;
/*!40000 ALTER TABLE `blog` DISABLE KEYS */;
INSERT INTO `blog` VALUES (1,1,79,'Yii2集成Markdown编辑器','- 在博客系统中Markdown编辑器应用的非常广泛\r\n\r\n- [https://github.com/kartik-v/yii2-markdown](https://github.com/kartik-v/yii2-markdown \"https://github.com/kartik-v/yii2-markdown\")\r\n项目中也详细介绍了如何配置markdown编辑器，由于kartik-v开发的markdown编辑器由于没有提供图片上传功能 。另辟蹊径找到了editor.md这个开源项目。\r\n\r\n- [https://pandao.github.io/editor.md/examples/index.html](https://pandao.github.io/editor.md/examples/index.html \"https://pandao.github.io/editor.md/examples/index.html\")\r\n （Open source online markdown editor.）editor.md\r\n\r\n- Yii2很好的提供了对bower组件的支持，这里采用widget的方式把editor.md集成到框架中。\r\n\r\n##首先安装依赖包：\r\n```\r\ncomposer require anruence/yii2-editor.md\r\n\r\n```\r\n- 源码参考：[https://github.com/anruence/yii2-editor.md](https://github.com/anruence/yii2-editor.md \"https://github.com/anruence/yii2-editor.md\")\r\n\r\n\r\n##在views使用widget的两种方法：\r\n\r\n###第一种用法\r\n```php\r\n    <?= $form->field($model, \'content\')->widget(EditorMd::className(), [\r\n            \'options\' => [\r\n                \'height\' => \'640\',\r\n//                \'previewTheme\' => \'dark\',\r\n//                \'editorTheme\' => \'pastel-on-dark\',\r\n                \'markdown\' => \'\',\r\n                \'codeFold\' => true,\r\n                \'syncScrolling\' => true,\r\n                \'saveHTMLToTextarea\' => true,    // 保存 HTML 到 Textarea\r\n                \'searchReplace\' => true,\r\n//                \'watch\' => false,                // 关闭实时预览\r\n                \'htmlDecode\' => \'style,script,iframe|on*\',            // 开启 HTML 标签解析，为了安全性，默认不开启\r\n//                \'toolbar\' => false,             //关闭工具栏\r\n                \'previewCodeHighlight\' => false, // 关闭预览 HTML 的代码块高亮，默认开启\r\n                \'emoji\' => true,\r\n                \'taskList\' => true,\r\n                \'tocm\' => true,         // Using [TOCM]\r\n                \'tex\' => true,                   // 开启科学公式TeX语言支持，默认关闭\r\n                \'flowChart\' => true,             // 开启流程图支持，默认关闭\r\n                \'sequenceDiagram\' => true,       // 开启时序/序列图支持，默认关闭,\r\n//                \'dialogLockScreen\' => false,   // 设置弹出层对话框不锁屏，全局通用，默认为true\r\n//                \'dialogShowMask\' => false,     // 设置弹出层对话框显示透明遮罩层，全局通用，默认为true\r\n//                \'dialogDraggable\' => false,    // 设置弹出层对话框不可拖动，全局通用，默认为true\r\n//                \'dialogMaskOpacity\' => 0.4,    // 设置透明遮罩层的透明度，全局通用，默认值为0.1\r\n//                \'dialogMaskBgColor\' => \'#000\', // 设置透明遮罩层的背景颜色，全局通用，默认为#fff\r\n                \'imageUpload\' => true,\r\n                \'imageFormats\' => [\'jpg\', \'jpeg\', \'gif\', \'png\', \'bmp\', \'webp\'],\r\n                \'imageUploadURL\' => \'/file/blog-upload?type=default&filekey=editormd-image-file\',\r\n            ]\r\n        ]\r\n    ) ?>\r\n\r\n```\r\n###第二种用法\r\n\r\n```\r\n    <?= EditorMd::widget([\r\n        \'id\' => \'editormd\',\r\n		\'name\' => \'content\',\r\n        \'value\' => \'\',\r\n        \'options\' => [\r\n            \'height\' => \'640\',\r\n            //...\r\n        ]\r\n    ]) ?>\r\n```\r\n如果需要配置图片上传，返回的数据格式参照\r\n\r\n```\r\n        Yii::$app->response->format = \\yii\\web\\Response::FORMAT_JSON;\r\n        if ($success) {\r\n            $data = [\r\n                \'success\' => 1,\r\n                \'message\' => \'上传成功\',\r\n                \"url\" => $response[\"url\"],\r\n            ];\r\n        } else {\r\n            $data = [\r\n                \'success\' => 0,\r\n                \'message\' => \'上传失败\',\r\n            ];\r\n        }\r\n        return $data;\r\n```\r\n\r\n如果配置有问题，欢迎留言。：)',1467599311,1481723614,0,'0'),(2,218,11,'Yii2-错误处理组件','# 1、核心组件\r\n\r\nYii2有8个核心组件，5个web组件，3个console组件。web和console各有一个同名不同类的错误处理组件errorHandler。\r\n\r\n- 核心组件：\r\n\r\n```\r\n[\r\n        \'log\' => [\'class\' => \'yii\\log\\Dispatcher\'],\r\n        \'view\' => [\'class\' => \'yii\\web\\View\'],\r\n        \'formatter\' => [\'class\' => \'yii\\i18n\\Formatter\'],\r\n        \'i18n\' => [\'class\' => \'yii\\i18n\\I18N\'],\r\n        \'mailer\' => [\'class\' => \'yii\\swiftmailer\\Mailer\'],\r\n        \'urlManager\' => [\'class\' => \'yii\\web\\UrlManager\'],\r\n        \'assetManager\' => [\'class\' => \'yii\\web\\AssetManager\'],\r\n        \'security\' => [\'class\' => \'yii\\base\\Security\'],\r\n]\r\n```\r\n\r\n- web组件：\r\n\r\n```\r\n[\r\n        \'request\' => [\'class\' => \'yii\\web\\Request\'],\r\n        \'response\' => [\'class\' => \'yii\\web\\Response\'],\r\n        \'session\' => [\'class\' => \'yii\\web\\Session\'],\r\n        \'user\' => [\'class\' => \'yii\\web\\User\'],\r\n        \'errorHandler\' => [\'class\' => \'yii\\web\\ErrorHandler\'],\r\n]\r\n```\r\n- console组件：\r\n\r\n```\r\n[\r\n        \'request\' => [\'class\' => \'yii\\console\\Request\'],\r\n        \'response\' => [\'class\' => \'yii\\console\\Response\'],\r\n        \'errorHandler\' => [\'class\' => \'yii\\console\\ErrorHandler\'],\r\n]\r\n```\r\n\r\n# 2、注册组件\r\n从Application的构造开始，yii\\web\\Application默认提供了errorHandler组件，类为yii\\web\\ErrorHandler\r\n\r\n注册错误处理：\r\n\r\n```\r\npublic function __construct($config = [])\r\n{\r\n        Yii::$app = $this;\r\n        $this->setInstance($this);\r\n        $this->state = self::STATE_BEGIN;\r\n        $this->preInit($config);\r\n        $this->registerErrorHandler($config);\r\n        Component::__construct($config);\r\n}\r\nprotected function registerErrorHandler(&$config)\r\n{\r\n        if (YII_ENABLE_ERROR_HANDLER) {\r\n                if (!isset($config[\'components\'][\'errorHandler\'][\'class\'])) {\r\n                        echo \"Error: no errorHandler component is configured.\\n\";\r\n                        exit(1);\r\n                }\r\n                $this->set(\'errorHandler\', $config[\'components\'][\'errorHandler\']);\r\n                unset($config[\'components\'][\'errorHandler\']);\r\n                $this->getErrorHandler()->register();\r\n        }\r\n}\r\npublic function register()\r\n{\r\n        ini_set(\'display_errors\', false);\r\n        set_exception_handler([$this, \'handleException\']);\r\n        if (defined(\'HHVM_VERSION\')) {\r\n                set_error_handler([$this, \'handleHhvmError\']);\r\n        } else {\r\n                set_error_handler([$this, \'handleError\']);\r\n        }\r\n        if ($this->memoryReserveSize > 0) {\r\n                $this->_memoryReserve = str_repeat(\'x\', $this->memoryReserveSize);\r\n        }\r\n        register_shutdown_function([$this, \'handleFatalError\']);\r\n}\r\n```\r\n\r\n# 3、错误处理\r\nYii2默认关掉了php的display_errors，然后注册了三个处理错误处理函数：\r\n\r\n- set_exception_handler：当运行期间使用throw语句抛出未捕获异常时，会走到handleException，但如果程序员自己try-catch了异常且并没有继续向外抛的话，不会执行handleException。对于set_exception_handler捕获的异常，使用logException记日志。\r\n- set_error_handler：在应用程序中严重错误发生时，或者在特定条件下触发了一个错误(使用 trigger_error())，会执行handleError。由于trigger_error是php最早的错误处理机制，自从php 5开始才引入了设计良好的exception，原先支持的error相对于exception而言的设计非常糟糕，于是对于set_error_handler捕获的error，yii2做了一个很巧妙的设计即将所有的error包装成exception并向外抛出，然后再使用set_exception_handler进行处理。\r\n- register_shutdown_function：在程序执行结束或者使用exit()方式结束，会执行handleFatalError。对于由register_shutdown_function捕获的致命错误，仍然包装成exception，由于代码运行已经结束，异常捕获机制已经失效了，所以该exception并不向外抛出，而是直接使用logException记日志。\r\n\r\n错误处理函数：\r\n\r\n```\r\npublic function handleException($exception)\r\n{\r\n        if ($exception instanceof ExitException) {\r\n                return;\r\n        }\r\n        $this->exception = $exception;\r\n        // disable error capturing to avoid recursive errors while handling exceptions\r\n        $this->unregister();\r\n        // set preventive HTTP status code to 500 in case error handling somehow fails and headers are sent\r\n        // HTTP exceptions will override this value in renderException()\r\n        if (PHP_SAPI !== \'cli\') {\r\n                http_response_code(500);\r\n        }\r\n        try {\r\n                $this->logException($exception);\r\n                if ($this->discardExistingOutput) {\r\n                        $this->clearOutput();\r\n                }\r\n                $this->renderException($exception);\r\n                if (!YII_ENV_TEST) {\r\n                        \\Yii::getLogger()->flush(true);\r\n                        if (defined(\'HHVM_VERSION\')) {\r\n                                flush();\r\n                        }\r\n                        exit(1);\r\n                }\r\n        } catch (\\Exception $e) {\r\n                // an other exception could be thrown while displaying the exception\r\n                $msg = \"An Error occurred while handling another error:\\n\";\r\n                $msg .= (string) $e;\r\n                $msg .= \"\\nPrevious exception:\\n\";\r\n                $msg .= (string) $exception;\r\n                if (YII_DEBUG) {\r\n                        if (PHP_SAPI === \'cli\') {\r\n                                echo $msg . \"\\n\";\r\n                        } else {\r\n                                echo \'<pre>\' . htmlspecialchars($msg, ENT_QUOTES, Yii::$app->charset) . \'</pre>\';\r\n                        }\r\n                } else {\r\n                        echo \'An internal server error occurred.\';\r\n                }\r\n                $msg .= \"\\n\\$_SERVER = \" . VarDumper::export($_SERVER);\r\n                error_log($msg);\r\n                if (defined(\'HHVM_VERSION\')) {\r\n                        flush();\r\n                }\r\n                exit(1);\r\n        }\r\n        $this->exception = null;\r\n}\r\n\r\npublic function handleError($code, $message, $file, $line)\r\n{\r\n        if (error_reporting() & $code) {\r\n                // load ErrorException manually here because autoloading them will not work\r\n                // when error occurs while autoloading a class\r\n                if (!class_exists(\'yii\\\\base\\\\ErrorException\', false)) {\r\n                        require_once(__DIR__ . \'/ErrorException.php\');\r\n                }\r\n                $exception = new ErrorException($message, $code, $code, $file, $line);\r\n                // in case error appeared in __toString method we can\'t throw any exception\r\n                $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);\r\n                array_shift($trace);\r\n                foreach ($trace as $frame) {\r\n                        if ($frame[\'function\'] == \'__toString\') {\r\n                                $this->handleException($exception);\r\n                                if (defined(\'HHVM_VERSION\')) {\r\n                                        flush();\r\n                                }\r\n                                exit(1);\r\n                        }\r\n                }\r\n                throw $exception;\r\n        }\r\n        return false;\r\n}\r\n\r\npublic function handleFatalError()\r\n{\r\n        unset($this->_memoryReserve);\r\n        // load ErrorException manually here because autoloading them will not work\r\n        // when error occurs while autoloading a class\r\n        if (!class_exists(\'yii\\\\base\\\\ErrorException\', false)) {\r\n                require_once(__DIR__ . \'/ErrorException.php\');\r\n        }\r\n        $error = error_get_last();\r\n        if (ErrorException::isFatalError($error)) {\r\n                if (!empty($this->_hhvmException)) {\r\n                        $exception = $this->_hhvmException;\r\n                } else {\r\n                        $exception = new ErrorException($error[\'message\'], $error[\'type\'], $error[\'type\'], $error[\'file\'], $error[\'line\']);\r\n                }\r\n                $this->exception = $exception;\r\n                $this->logException($exception);\r\n                if ($this->discardExistingOutput) {\r\n                        $this->clearOutput();\r\n                }\r\n                $this->renderException($exception);\r\n                // need to explicitly flush logs because exit() next will terminate the app immediately\r\n                Yii::getLogger()->flush(true);\r\n                if (defined(\'HHVM_VERSION\')) {\r\n                        flush();\r\n                }\r\n                exit(1);\r\n        }\r\n}\r\n```\r\n\r\n# 4、记录日志\r\n所有的错误都会使用Yii::error函数进行日志记录。\r\n\r\n记录日志：\r\n\r\n```\r\npublic function logException($exception)\r\n{\r\n        $category = get_class($exception);\r\n        if ($exception instanceof HttpException) {\r\n                $category = \'yii\\\\web\\\\HttpException:\' . $exception->statusCode;\r\n        } elseif ($exception instanceof \\ErrorException) {\r\n                $category .= \':\' . $exception->getSeverity();\r\n        }\r\n        Yii::error($exception, $category);\r\n}\r\n```',1467620269,1481723613,0,'0'),(3,326,13,'Yii2中集成echarts图形插件','# 背景\r\n目前市面上可选的图形化插件还是挺多的，从 highcharts/charts.js/echarts，有很多，而且都有对应的yii的封装. 目前个人倾向于选择echarts，之前在mt用来很久的highcharts，对于动态图和map的封装不是太好，而echarts是百度新开发的，3.0之后融合了动态展示和china地图的原生支持，图形效果也不错，考虑先采用echarts\r\n### 参考资料\r\n- echarts 官网: [http://echarts.baidu.com/index.html](http://echarts.baidu.com/index.html \"http://echarts.baidu.com/index.html\")\r\n- [http://echarts.baidu.com/echarts2/doc/slide/whyEcharts.html#/](- http://echarts.baidu.com/echarts2/doc/slide/whyEcharts.html#/ \"http://echarts.baidu.com/echarts2/doc/slide/whyEcharts.html#/\")\r\n- yii2 echarts封装: [https://github.com/daixianceng/yii2-echarts](https://github.com/daixianceng/yii2-echarts \"https://github.com/daixianceng/yii2-echarts\")\r\ndemo\r\n```php\r\n View代码:\r\n<?php\r\nuse yii\\helpers\\Html;\r\nuse yii\\web\\JsExpression;\r\nuse daixianceng\\echarts\\ECharts;\r\n$this->title = \'数据展示平台\';\r\n?>\r\n<div class=\"community-view\">\r\n    <h1><?= Html::encode($this->title) ?></h1>\r\n<?= ECharts::widget([\r\n    \'responsive\' => true,\r\n    \'options\' => [\r\n        \'style\' => \'height: 400px;\'\r\n    ],\r\n    \'pluginEvents\' => [\r\n        \'click\' => [\r\n            new JsExpression(\'function (params) {console.log(params)}\'),\r\n            new JsExpression(\'function (params) {console.log(\"ok\")}\')\r\n        ],\r\n        \'legendselectchanged\' => new JsExpression(\'function (params) {console.log(params.selected)}\')\r\n    ],\r\n    \'pluginOptions\' => [\r\n        \'option\' => [\r\n            \'title\' => [\r\n                \'text\' => $title\r\n            ],\r\n            \'tooltip\' => [\r\n                \'trigger\' => \'axis\'\r\n            ],\r\n            \'legend\' => [\r\n                \'data\' => $entitylist\r\n            ],\r\n            \'grid\' => [\r\n                \'left\' => \'3%\',\r\n                \'right\' => \'4%\',\r\n                \'bottom\' => \'3%\',\r\n                \'containLabel\' => true\r\n            ],\r\n            \'toolbox\' => [\r\n                \'feature\' => [\r\n                    \'dataView\' => [\'show\' => true, \'readOnly\' => false],\r\n                    \'magicType\' => [\'show\' => true, \'type\' => [\'line\', \'bar\', \'stack\', \'tiled\']],\r\n                    \'restore\' => [\'show\' => true],\r\n                    \'saveAsImage\' => []\r\n                ]\r\n            ],\r\n            \'xAxis\' => [\r\n                \'name\' => $xField,\r\n                \'type\' => \'category\',\r\n                \'boundaryGap\' => false,\r\n                \'data\' => $xRangeValues\r\n            ],\r\n            \'yAxis\' => [\r\n                \'type\' => \'value\'\r\n            ],\r\n            \'series\' => $seriesData,\r\n        ]\r\n    ]\r\n]); ?>\r\n</div>\r\n```\r\n```php\r\nController:\r\n<?php\r\n    public function actionIndex2()\r\n    {\r\n        $title = \'每日楼栋下单数\';\r\n        $xField = \'datekey\';\r\n        $xRangeValues = [\r\n            20160401,\r\n            20160402,\r\n            20160403,\r\n            20160404,\r\n            20160405,\r\n            20160406,\r\n            20160407,\r\n            20160408,\r\n            20160409,\r\n            20160410,\r\n            20160411,\r\n            20160412,\r\n            20160413,\r\n            20160414,\r\n            20160415,\r\n            20160416,\r\n            20160417,\r\n            20160418,\r\n            20160419,\r\n            20160420,\r\n            20160421,\r\n            20160422,\r\n            20160423,\r\n            20160424,\r\n            20160425,\r\n            20160426,\r\n            20160427,\r\n            20160428,\r\n            20160429,\r\n            20160430,\r\n            ];\r\n        $yField = \'total\';\r\n        $entitylist = [5944, 5948, 5949, 5956, 5950];\r\n        $metaData = [\'name\'=>\'\', \'smooth\'=>true, \'type\'=>\'line\', \'data\'=>[]];\r\n        $datas = \r\n            Orderstat::find()\r\n            ->select([\'datekey\', \'buildingid\', \'count(*) `total`\'])\r\n            ->andWhere([\'datekey\'=>$xRangeValues])\r\n            ->groupBy([\'datekey\', \'buildingid\'])\r\n            ->asArray()->all();\r\n        $seriesData = [];\r\n        foreach ($entitylist as $entity) {\r\n            $seriesData[$entity] = $metaData;\r\n            $seriesData[$entity][\'name\'] = $entity;\r\n            foreach ($xRangeValues as $xvalue) {\r\n                $seriesData[$entity][\'data\'][$xvalue] = 0;\r\n            }\r\n        }\r\n        foreach ($datas as $rows) {\r\n            $datekey = $rows[\'datekey\'];\r\n            $buildingid = $rows[\'buildingid\'];\r\n            $total = $rows[\'total\'];\r\n            if (!isset($seriesData[$buildingid][$datekey])) {\r\n                $seriesData[$buildingid][\'data\'][$datekey] = $total;\r\n            } else {\r\n                $seriesData[$buildingid][\'data\'][$datekey] += $total;\r\n            }\r\n        }\r\n        foreach ($seriesData as $key=>$arr) {\r\n            ksort($arr[\'data\'], SORT_NUMERIC);\r\n            $arr[\'data\'] = array_values($arr[\'data\']);\r\n            $seriesData[$key] = $arr;\r\n        }\r\n        $seriesData = array_values($seriesData);\r\n        return $this->render(\'index2\', [\r\n                \'title\' => $title,\r\n                \'xField\' => $xField,\r\n                \'yField\' => $yField,\r\n                // 只能展示string\r\n                \'entitylist\' => array_map(\'strval\', $entitylist),\r\n                \'datas\' => $datas,\r\n                \'xRangeValues\' => $xRangeValues,\r\n                \'seriesData\' => $seriesData,\r\n                ]);\r\n    }\r\n```\r\n\r\n# 效果图\r\n<div  align=\"center\">\r\n <img src=\"http://oss-cn-qingdao.aliyuncs.com/hljstatic/default/20160704/b0b50d3fc8201613.gif\" width = \"800\" height = \"600\" alt=\"图片名称\" align=center />\r\n</div>',1467634960,1481773831,0,'0'),(4,218,11,'Yii2-使用redis共享session','# 1、现状\r\n用户登录状态可以放在session中进行存储，而php.ini中默认使用文件存储session，这样无法做到在多web server中共享session存储，如下：\r\n\r\n```\r\n[Session]\r\n; Handler used to store/retrieve data\r\n; http://php.net/session.save-handler\r\nsession.save_handler = files\r\n```\r\n\r\n# 2、目标\r\n为了多台web server之间能共享session，只要多台web server之间能共享这种存储介质即可，比如mysql，memcached，redis都是很好的方案。\r\n\r\n介绍一下使用redis存储session，并假设已经存在可用的redis实例，下面介绍通用方法和与Yii2结合的方法。\r\n\r\n# 3、安装php的redis扩展\r\n\r\n```\r\ncurl -O https://nodeload.github.com/nicolasff/phpredis/zip/master\r\ntar -zxf master\r\ncd phpredis-master/\r\nphpize\r\n./configure\r\nmake\r\nsudo make install\r\n```\r\n\r\n这时候会提示一个路径\r\n\r\n```\r\nvim /etc/php.ini\r\n```\r\n\r\n增加如下内容\r\n\r\n```\r\nextension=redis.so\r\n```\r\n\r\n查看扩展安装情况\r\n\r\n```\r\nphp -m | grep redis\r\n```\r\n\r\n出现 redis 表示安装成功。\r\n\r\n配置php.ini的session的handler\r\n\r\n```\r\n[Session]\r\n; Handler used to store/retrieve data.\r\n; http://php.net/session.save-handler\r\nsession.save_handler = redis\r\nsession.save_path = \"tcp://127.0.0.1:6379\"\r\n; 如果redis有密码，则按照下面模板配置\r\n;session.save_path = \"tcp://127.0.0.1:6379?auth=password\"\r\n```\r\n\r\n# 4、Yii2支持redis存储session\r\n在config文件中增加以下一段：\r\n\r\n```\r\n\'session\' => [\r\n    \'class\' => \'yii\\redis\\Session\',\r\n    \'redis\' => [\r\n        \'hostname\' => \'121.121.121.121\',\r\n        \'port\' => 6379,\r\n        \'database\' => 0,\r\n        \'password\' => \'REDIS_PASSWORD\',\r\n    ],\r\n    \'keyPrefix\' => \"honglingjin-session\",\r\n]\r\n```\r\n\r\n# 5、总结：\r\n\r\n- 当采用Yii2的session插件组件时，会忽略php.ini指定的session存储；\r\n- 采用Yii2处理session是因为更加灵活，而且更具扩展；\r\n',1467642905,1481773990,0,'0'),(5,218,29,'Yii2-事件和行为','# 什么是事件Event\r\n\r\n事件是关键的点触发的动作，比如订单支付完成后告诉库房去发货。\r\n\r\n## 绑定事件\r\n\r\n绑定事件有4种方法：\r\n\r\n1. 订单支付成功绑定PHP全局函数\r\n```\r\n$order->on(\'pay\', \'deliver_function\');\r\n```\r\n2. 订单支付成功绑定某个对象的成员函数\r\n```\r\n$order->on(\'pay\', [$order, \'deliver_function\']);\r\n```\r\n3. 订单支付成功绑定某个类的静态函数\r\n```\r\n$order->on(\'pay\', [\'common\\models\\Order\', \'deliver_function\']);\r\n```\r\n4. 订单支付成功绑定匿名函数\r\n```\r\n$order->on(\'pay\', function ($event) {\r\n    echo \'马上发货\';\r\n});\r\n```\r\n\r\n## 触发事件\r\n\r\n需要由宿主对象主动触发事件，比如当完成支付后需要主动触发pay事件：\r\n```\r\n$order->trigger(\'pay\');\r\n```\r\n\r\n## 应用示例\r\n\r\n学生在考场考试，老师在考场监考，给学生绑定一个作弊事件，只要学生作弊，老师立马当堂大喊：好大的胆子。\r\n```\r\n<?php\r\nnamespace console\\controllers;\r\n\r\nuse Yii;\r\nuse yii\\console\\Controller;\r\nuse yii\\base\\Component;\r\n\r\nclass TestController extends Controller\r\n{\r\n    public function actionTest()\r\n    {\r\n        $teacher = new Teacher();\r\n        $student = new Student();\r\n        $student->on(\'cheat\', [$teacher, \'supervise\']);\r\n        $student->cheat();\r\n    }\r\n}\r\n\r\nclass Student extends Component\r\n{\r\n    public function cheat()\r\n    {\r\n        echo \"学生: 开始作弊\\n\";\r\n        $this->trigger(\'cheat\');\r\n    }\r\n}\r\n\r\nclass Teacher extends Component\r\n{\r\n    public function supervise()\r\n    {\r\n        echo \"老师: 好大的胆子\\n\";\r\n    }\r\n}\r\n```\r\n执行结果：\r\n```\r\n[liwei@dev:www(master)]$ ./yii test/test\r\n学生: 开始作弊\r\n老师: 好大的胆子\r\n```\r\n\r\n# 什么是行为Bahavior\r\n\r\n先看一个例子：\r\n```\r\n<?php\r\nnamespace console\\controllers;\r\n\r\nuse Yii;\r\nuse yii\\console\\Controller;\r\nuse yii\\base\\Component;\r\nuse yii\\base\\Behavior;\r\n\r\nclass TestController extends Controller\r\n{\r\n    public function actionTest()\r\n    {\r\n        $myClass = new MyClass();\r\n        $myBehavior = new MyBehavior();\r\n\r\n        // Step 3: 将行为绑定到类上\r\n        $myClass->attachBehavior(\'myBehavior\', $myBehavior);\r\n\r\n        // Step 4: 访问行为中的属性和方法，就和访问类自身的属性和方法一样\r\n        echo $myClass->property1, \"\\n\";\r\n        echo $myClass->method1(), \"\\n\";\r\n    }\r\n}\r\n\r\n/**\r\n * 定义一个空组件\r\n */\r\nclass MyClass extends Component\r\n{\r\n}\r\n\r\n/**\r\n * 定义一个行为类\r\n */\r\nclass MyBehavior extends Behavior\r\n{\r\n    // 行为的一个属性\r\n    public $property1 = \'honglingjin attribute\';\r\n\r\n    // 行为的一个方法\r\n    public function method1()\r\n    {\r\n        return \'honglingjin function\';\r\n    }\r\n}\r\n```\r\n执行完成后：\r\n```\r\n[liwei@dev:www(master)]$ ./yii test/test\r\nhonglingjin attribute\r\nhonglingjin function\r\n```\r\n\r\n那么实现机制是怎样的呢？首先讲一下php的魔术方法\\__call，请参考<http://php.net/manual/zh/language.oop5.magic.php>\r\n> 在对象中调用一个不可访问方法时，\\__call() 会被调用。\r\n\r\n> 用静态方式中调用一个不可访问方法时，__callStatic() 会被调用。\r\n\r\n在Yii2源码中全文搜索\\__call，发现只有Obejct和Component实现了\\__call：\r\n```\r\n[liwei@dev:yii2(master)]$ git grep \"__call(\"\r\nbase/Component.php:    public function __call($name, $params)\r\nbase/Object.php:    public function __call($name, $params)\r\nbase/Object.php:     * You may override this method when you implemented the php magic method `__call()`.\r\n[liwei@dev:yii2(master)]$\r\n```\r\nObject的__call实现是直接抛出异常：\r\n```\r\npublic function __call($name, $params)\r\n{\r\n    throw new UnknownMethodException(\'Calling unknown method: \' . get_class($this) . \"::$name()\");\r\n}\r\n```\r\nComponent的实现是找到所有的行为并尝试调用同名方法：\r\n```\r\npublic function __call($name, $params)\r\n{\r\n    $this->ensureBehaviors();\r\n    foreach ($this->_behaviors as $object) {\r\n        if ($object->hasMethod($name)) {\r\n            return call_user_func_array([$object, $name], $params);\r\n        }\r\n    }\r\n    throw new UnknownMethodException(\'Calling unknown method: \' . get_class($this) . \"::$name()\");\r\n}\r\n```\r\n这样对于对象没有的方法就会去调用绑定的行为的方法，同理，对象没有的属性也会去使用绑定的行为的属性。\r\n\r\n# 事件和行为的区别\r\n\r\nEvent和Behavior解决的问题都是关于如何将新代码注入进已有代码系统，所不同的是：\r\n\r\n- Event是利用埋点的方式触发外部代码，只能在宿主对象的特定执行点才回触发\r\n- Behavior是增强某个对象的能力，使它拥有额外的属性和方法\r\n\r\n同时当两者结合使用的会变得更加强大，Behavior首先扩展既有代码，Event进行触发执行这些扩展代码。',1467876575,1481723614,0,'0'),(6,14,14,'Yii2-事务的使用及事务嵌套','##1. 在Yii2中使用事务\r\n在Yii2中通常我们这样使用事务  \r\n\r\n```\r\n$transaction = Yii::$app->db->beginTransaction(); //使用数据库连接开启事务，并创建了一个transaction对象\r\ntry {\r\n    $db->createCommand($sql)->execute(); //对数据库进行操作\r\n    $transaction->commit(); //调用transaction的commit方法进行事务的提交\r\n} catch(Exception $e) {\r\n    $transaction->rollBack(); //捕获异常则，调用rollBack方法回滚数据库\r\n}\r\n```\r\n##2. 事务的创建和开启\r\n通过调用yii\\db\\Connection的beginTransaction()方法创建了一个yii\\db\\Transaction对象，进行事务的创建，并在创建事务的同时开启事务。\r\n  \r\n```\r\nclass Connection extends Component\r\n{\r\n	public function beginTransaction($isolationLevel = null)\r\n	{\r\n		//开启数据库连接\r\n	    $this->open();\r\n\r\n        if (($transaction = $this->getTransaction()) === null) {\r\n        	//创建事务对象，并初始化连接\r\n            $transaction = $this->_transaction = new Transaction([\'db\' => $this]);\r\n        }\r\n        //以$isolationLevel的隔离级别开启事务\r\n        $transaction->begin($isolationLevel);\r\n\r\n        return $transaction;\r\n    }\r\n    \r\n    public function getTransaction()\r\n    {\r\n    	//获取当前活动事务\r\n        return $this->_transaction && $this->_transaction->getIsActive() ? $this->_transaction : null;\r\n    }\r\n}\r\n\r\nclass Transaction extends \\yii\\base\\Object\r\n{\r\n	private $_level = 0;\r\n	\r\n	public function begin($isolationLevel = null)\r\n    {\r\n        if ($this->db === null) {\r\n            throw new InvalidConfigException(\'Transaction::db must be set.\');\r\n        }\r\n        $this->db->open();\r\n		//第一个事务默认为最外层事务，设置事务等级为0\r\n        if ($this->_level === 0) {\r\n        	//设定隔离级别\r\n            if ($isolationLevel !== null) {\r\n                $this->db->getSchema()->setTransactionIsolationLevel($isolationLevel);\r\n            }\r\n            Yii::trace(\'Begin transaction\' . ($isolationLevel ? \' with isolation level \' . $isolationLevel : \'\'), __METHOD__);\r\n			//触发开启事务的事件，在yii源码中并没有绑定该事件\r\n            $this->db->trigger(Connection::EVENT_BEGIN_TRANSACTION);\r\n            //开启事务，并将事务等级修改为1\r\n            $this->db->pdo->beginTransaction();\r\n            $this->_level = 1;\r\n\r\n            return;\r\n        }\r\n        //当事务不为最外层事务是，即该事务为嵌套事务时，通过设置SAVEPOINT来进行事务的嵌套\r\n        $schema = $this->db->getSchema();\r\n        if ($schema->supportsSavepoint()) {\r\n            Yii::trace(\'Set savepoint \' . $this->_level, __METHOD__);\r\n            //根据事务等级设置SVAEPONIT\r\n            $schema->createSavepoint(\'LEVEL\' . $this->_level);\r\n        } else {\r\n            Yii::info(\'Transaction not started: nested transaction not supported\', __METHOD__);\r\n        }\r\n        $this->_level++;\r\n    }\r\n}\r\n```\r\n其中```setTransactionIsolationLevel()```方法通过直接提交```SET TRANSACTION ISOLATION LEVEL $isolationLevel```语句修改数据库隔离级别。\r\n\r\n##3. 事务的嵌套\r\nYii2通过设置数据库的SAVEPOINT进行事务的嵌套，但在数据库中仍为一个事务，请务必分清Yii2的事务和数据库的事务。在进行嵌套时，会更改当前事务的层级。\r\n```\r\n$transaction = Yii::$app->db->beginTransaction(); //使用数据库连接开启事务，并创建了一个transaction对象\r\ntry {\r\n    $db->createCommand($sql1)->execute();\r\n    try {\r\n    	$db->createCommand($sql2)->execute();\r\n    	$transaction->commit(); \r\n    } catch(Exception $e) {\r\n    	$transaction->rollBack(); \r\n	}\r\n    $transaction->commit(); \r\n} catch(Exception $e) {\r\n    $transaction->rollBack(); \r\n}\r\n```\r\n![数据库事务嵌套](http://oss-cn-qingdao.aliyuncs.com/hljstatic/default/20160709/67c88e56b4170907.png \"数据库事务嵌套\")\r\n##4. 事务的提交及回滚\r\n```\r\npublic function commit()\r\n    {\r\n		//判断事务当前事务是否活动\r\n        if (!$this->getIsActive()) {\r\n            throw new Exception(\'Failed to commit transaction: transaction was inactive.\');\r\n        }\r\n		//事务提交及回滚时事务等级-1\r\n        $this->_level--;\r\n        //当事务等级为0时直接向数据库发送commit命令，在数据库提交整个事务\r\n        if ($this->_level === 0) {\r\n            Yii::trace(\'Commit transaction\', __METHOD__);\r\n            $this->db->pdo->commit();\r\n            $this->db->trigger(Connection::EVENT_COMMIT_TRANSACTION);\r\n            return;\r\n        }\r\n\r\n        $schema = $this->db->getSchema();\r\n        if ($schema->supportsSavepoint()) {\r\n        	//当事务等级不为0时，进行sql操作，并释放当前事务层级的SAVEPONIT\r\n            Yii::trace(\'Release savepoint \' . $this->_level, __METHOD__);\r\n            $schema->releaseSavepoint(\'LEVEL\' . $this->_level);\r\n        } else {\r\n            Yii::info(\'Transaction not committed: nested transaction not supported\', __METHOD__);\r\n        }\r\n    }\r\n    public function rollBack()\r\n    {\r\n        if (!$this->getIsActive()) {\r\n            // do nothing if transaction is not active: this could be the transaction is committed\r\n            // but the event handler to \"commitTransaction\" throw an exception\r\n            return;\r\n        }\r\n\r\n        $this->_level--;\r\n        if ($this->_level === 0) {\r\n        	//当事务等级为0时，直接向数据库发送回滚命令，数据库回滚整个事务\r\n            Yii::trace(\'Roll back transaction\', __METHOD__);\r\n            $this->db->pdo->rollBack();\r\n            $this->db->trigger(Connection::EVENT_ROLLBACK_TRANSACTION);\r\n            return;\r\n        }\r\n\r\n        $schema = $this->db->getSchema();\r\n        if ($schema->supportsSavepoint()) {\r\n        	//当事务等级不为0时，数据库回滚到当前事务层级的SAVEPOINT\r\n            Yii::trace(\'Roll back to savepoint \' . $this->_level, __METHOD__);\r\n            $schema->rollBackSavepoint(\'LEVEL\' . $this->_level);\r\n        } else {\r\n            Yii::info(\'Transaction not rolled back: nested transaction not supported\', __METHOD__);\r\n            // throw an exception to fail the outer transaction\r\n            throw new Exception(\'Roll back failed: nested transaction not supported.\');\r\n        }\r\n    }\r\npublic function getIsActive()\r\n    {\r\n		//当处于事务内，且数据库连接有效，事务才为活动状态\r\n        return $this->_level > 0 && $this->db && $this->db->isActive;\r\n    }\r\n```\r\n##5. 总结\r\n* Yii2通过设置数据库的SAVEPOINT的方式进行事务的嵌套\r\n* 当事务处于最外层时，通过数据库的```COMMIT```和```ROLLBACK```进行回滚操作\r\n* 当事务处于内层时，即事务嵌套时，通过数据库的```RELEASE SAVEPOINT```和```ROLLBACK TO SAVEPOINT```进行提交和回滚事务，此时仍处在数据库事务中\r\n* 提交和回滚时都会将事务层级-1。当事务层级为0时，此时处于事务外。',1468055424,1481726784,0,'0'),(7,312,27,'Yii2集成微信支付SDK','\r\n把SDK集成进项目中，一般不使用reqiure文件的方式，框架中会自动加载指定目录中的文件，我们则需要使用namespace的方式把微信支付所用的库做成一个个帮助类。\r\nYii2项目中helpers的文件名称要与类名称一致，所有首先要把所有文件重命名，然后在每个类中加上命名空间。\r\n\r\n以下是文件的拆分过程:\r\n\r\n###lib目录\r\n- ![](http://oss-cn-qingdao.aliyuncs.com/hljstatic/default/20160711/7d0fcce5bf154953.png)\r\n- WxPay.Api.php\r\n- WxPay.Config.php\r\n- WxPay.Data.php\r\n- WxPay.Exception.php\r\n- WxPay.Notify.php\r\n\r\n以第一个文件WxPay.Api.php举例:\r\n\r\n- WxPay.Api.php -> WxPayApi.php\r\n- 删除require_once之类的代码\r\n```php\r\nrequire_once \"WxPay.Exception.php\";\r\nrequire_once \"WxPay.Config.php\";\r\nrequire_once \"WxPay.Data.php\";\r\n```\r\n- 增加namespace\r\n```php\r\nnamespace pay\\wxsdk;\r\n```\r\n\r\n【由于WxPay.Data.php文件中有很多class，为了让每个类看着更清晰，拆分成了多个文件。】\r\n\r\n###example目录文件拆分\r\n- ![](http://oss-cn-qingdao.aliyuncs.com/hljstatic/default/20160711/d636215609154914.png)\r\n- WxPay.JsApiPay.php\r\n- WxPay.MicroPay.php\r\n- WxPay.NativePay.php\r\n\r\nWxPay.JsApiPay.php这个类主要实现了：\r\n\r\n * 从微信公众平台获取code、通过code获取openid和access_token、\r\n * 生成jsapi支付js接口所需的参数、生成获取共享收货地址所需的参数\r\n\r\n以同样的方法把这三个类封装成namespace调用的方式，不一样的地方是为了让类名不重复，将文件名改成了JsApiPay.php。\r\n\r\n###在controller中使用\r\n这样我们在controller中调用的时候，就可以\r\n```php\r\nuse pay\\wxsdk\\WxPayApi;\r\n```\r\n这种方式把类引入。\r\n\r\n我们拿example中的jsapi.php举例，这个文件中的代码就可以像下面这样迁移到我们项目中去。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace pay\\controllers;\r\n\r\nuse yii\\web\\Controller;\r\nuse pay\\wxsdk\\WxPayApi;\r\nuse pay\\wxsdk\\WxPayConfig;\r\nuse pay\\wxsdk\\WxPayUnifiedOrder;\r\nuse pay\\wxsdk\\JsApiPay;\r\n\r\nclass PayController extends Controller\r\n{\r\n    public function actionOrder()\r\n    {\r\n        //①、获取用户openid\r\n        $tools = new JsApiPay();\r\n        $openId = $tools->GetOpenid();\r\n\r\n        //②、统一下单\r\n        $input = new WxPayUnifiedOrder();\r\n        $input->SetBody(\"test\");\r\n        $input->SetAttach(\"test\");\r\n        $input->SetOut_trade_no(WxPayConfig::MCHID . date(\"YmdHis\"));\r\n        $input->SetTotal_fee(\"1\");\r\n        $input->SetTime_start(date(\"YmdHis\"));\r\n        $input->SetTime_expire(date(\"YmdHis\"， time() + 600));\r\n        $input->SetGoods_tag(\"test\");\r\n        $input->SetNotify_url(\"http://paysdk.weixin.qq.com/example/notify.php\");\r\n        $input->SetTrade_type(\"JSAPI\");\r\n        $input->SetOpenid($openId);\r\n        $order = WxPayApi::unifiedOrder($input);\r\n        echo \'<font color=\"#f00\"><b>统一下单支付单信息</b></font><br/>\';\r\n        printf_info($order);\r\n        $jsApiParameters = $tools->GetJsApiParameters($order);\r\n\r\n        //获取共享收货地址js函数参数\r\n        $editAddress = $tools->GetEditAddressParameters();\r\n    }\r\n}\r\n```\r\n',1468223152,1481773880,0,'0'),(8,326,26,'Yii2中的依赖注入','# 依赖注入相关名词\r\n### 依赖倒置原则（Dependence Inversion Principle, DIP）\r\nDIP是一种软件设计的指导思想。传统软件设计中，上层代码依赖于下层代码，当下层出现变动时， 上层代码也要相应变化，维护成本较高。而DIP的核心思想是上层定义接口，下层实现这个接口， 从而使得下层依赖于上层，降低耦合度，提高整个系统的弹性。这是一种经实践证明的有效策略。\r\n### 控制反转（Inversion of Control, IoC）\r\nIoC就是DIP的一种具体思路，DIP只是一种理念、思想，而IoC是一种实现DIP的方法。 IoC的核心是将类（上层）所依赖的单元（下层）的实例化过程交由第三方来实现。 一个简单的特征，就是类中不对所依赖的单元有诸如 $component = new yii\\component\\SomeClass（） 的实例化语句。\r\n### 依赖注入（Dependence Injection, DI）\r\n**DI是IoC的一种设计模式**，是一种套路，按照DI的套路，就可以实现IoC，就能符合DIP原则。 **DI的核心是把类所依赖的单元的实例化过程，放到类的外面去实现。**控制反转容器（IoC Container）当项目比较大时，依赖关系可能会很复杂。 而IoC Container提供了动态地创建、注入依赖单元，映射依赖关系等功能，减少了许多代码量。 Yii 设计了一个 yii\\di\\Container 来实现了 DI Container。\r\n### 服务定位器（Service Locator）\r\n**Service Locator是IoC的另一种实现方式， 其核心是把所有可能用到的依赖单元交由Service Locator进行实例化和创建、配置**， 把类对依赖单元的依赖，转换成类对Service Locator的依赖。 DI 与 Service Locator并不冲突，两者可以结合使用。 目前，Yii2.0把这DI和Service Locator这两个东西结合起来使用，或者说通过DI容器，实现了Service Locator。\r\n\r\n# Yii中的两种注入方式\r\n### 构造函数注入\r\n![](http://oss-cn-qingdao.aliyuncs.com/hljstatic/default/20160711/4a47a0db6e222505.png)\r\n\r\n### 属性注入\r\n![](http://oss-cn-qingdao.aliyuncs.com/hljstatic/default/20160711/fb5c81ed3a222516.png)\r\n\r\n对比构造注入和属性注入两种方式，其实本质上没有不同，都是在使用前，将所需的组件实例化，具体的实例化放在了类的外面，这样外面的类的改动就不影响类本身的代码，从而实现了控制反转，减少了代码的耦合和维护成本\r\n\r\n# 注入的本质\r\n与构造函数注入类似，属性注入也是将Comment类所依赖的EmailSenderInterface**的实例化过程放在Comment类以外。\r\n这就是依赖注入的本质所在**。为什么称为注入？从外面把东西打进去，就是注入。\r\n什么是外，什么是内？ 要解除依赖的类内部就是内，实例化所依赖单元的地方就是外。',1468247122,1481773931,0,'0'),(9,218,23,'Yii2实现频道动态展示和排序','## 需求\r\n\r\n1. 能动态调整频道在不同的学校的排序，比如有的学校这周主推周预定，那么周预定频道需要在最前面\r\n2. 能动态控制频道在不同的学校是否展示，比如有的学校不进行抽奖活动，那么在后台关掉抽奖频道即可\r\n\r\n## 方案\r\n\r\n### 需求1\r\n\r\nKrajee的SortableInput就能满足需求1，看一下官方的用法示例：\r\n\r\n![](http://oss-cn-qingdao.aliyuncs.com/hljstatic/default/20160714/db978d3ed9131216.gif)\r\n\r\n它的原理是对最终上传了一个字符串字段，字段按顺序用英文逗号分隔了每个item的顺序。\r\n\r\n### 需求2\r\n\r\n我们需要自己在SortableInput每个item中嵌入一个多选框，如果展示该频道就选中该多选框，如果隐藏该频道就不选中该多选框，看一下代码：\r\n\r\n```php\r\n<?php\r\n$items = [];\r\n$channels = Channel::find()->all();\r\nforeach ($channels as $channel) {\r\n    $channelcommunity = ChannelCommunity::find()->where([\'communityid\' => $model->id, \'channelid\' => $channel->id])->one();\r\n    if ($channel->isFixed()) {\r\n        $items[$channel->id] = [\'content\' => \'<input name=\"channelshow[]\" type=\"checkbox\" checked=\"checked\" disabled=\"disabled\"> \' . $channel->title];\r\n    } elseif ($model->isNewRecord) {\r\n        $items[$channel->id] = [\'content\' => \'<input name=\"channelshow[]\" type=\"checkbox\" value=\"\' . $channel->id . \'\"> \' . $channel->title];\r\n    } else {\r\n        $items[$channel->id] = [\'content\' => \'<input name=\"channelshow[]\" type=\"checkbox\" value=\"\' . $channel->id . \'\"\' . ($channelcommunity && $channelcommunity->status ? \' checked=\"checked\"\' : \'\') . \'\" type=\"checkbox\" \' .\'> \' . $channel->title];\r\n    }\r\n}\r\necho $form->field($model, \'channelsort\')->widget(SortableInput::classname(), [\r\n    \'items\' => $items,\r\n    \'hideInput\' => true,\r\n    \'options\' => [\'class\'=>\'form-control\', \'readonly\'=>true]\r\n]) ?>\r\n```\r\n\r\n后端处理代码：\r\n\r\n```php\r\n$model->setChannelsort($post[\'Community\'][\'channelsort\'], ArrayHelper::getValue($post, \'channelshow\', []));\r\n\r\npublic function setChannelsort($sort, $show)\r\n{\r\n    $arr = array_filter(explode(\',\', $sort));\r\n    foreach ($arr as $key => $channelid) {\r\n        $channel = Channel::findOne($channelid);\r\n        $channelcommunity = ChannelCommunity::find()->where([\'communityid\' => $this->id, \'channelid\' => $channelid])->one();\r\n        if (!$channelcommunity) {\r\n            $channelcommunity = new ChannelCommunity();\r\n            $channelcommunity->channelid = $channelid;\r\n            $channelcommunity->communityid = $this->id;\r\n        }\r\n        $channelcommunity->priority = $key + 1;\r\n        $channelcommunity->status = $channel->isFixed() ? 1 : intval(in_array($channelid, $show));\r\n        $channelcommunity->save(false);\r\n    }\r\n}\r\n```\r\n\r\n## 演示\r\n\r\n![](http://oss-cn-qingdao.aliyuncs.com/hljstatic/default/20160707/caaa565150160202.gif)\r\n\r\n![](http://oss-cn-qingdao.aliyuncs.com/hljstatic/default/20160714/9e7e3a1734113337.png)',1468473555,1481774697,0,'0'),(10,14,10,'Yii-activeForm','##What is ActiveForm?\r\n`ActiveForm`是为一个或多个数据模型建立HTML表单的小部件。  \r\n在使用Yii2进行后台页面编写时，我们经常需要一些表单来进行新增/修改数据，这时候我们会使用`Activeform`进行表单的设计。在使用Gii生成CURD代码时，在`_form.php`中会自动使用`yii\\widgets\\ActiveForm`(在红领巾的业务系统中，我们修改了Gii的模板代码，使用`yii\\bootstrap\\ActiveForm`取代了`yii\\widgets\\ActiveForm`) \r\n##继承关系  \r\n* `\\yii\\bootstrap\\ActiveForm` (yii2自带部件) extend `\\yii\\widgets\\ActiveForm`  \r\n* `\\kartik\\form\\ActiveForm` (kartik部件) extend `\\yii\\widgets\\ActiveForm`  \r\n* `\\kartik\\widgets\\ActiveForm` extend `\\kartik\\form\\ActiveForm`  \r\n\r\n##ActiveForm的实现方法\r\n1. 调用`ActiveForm::begin`的静态方法，根据配置创建一个`ActiveForm`对象，并`echo`出`<form>`标签和`<input tyep=\"hidden\">`标签  \r\n2. 通过调用`ActiveForm`的实例方法`filed`创建`ActiveFiled`对象，`echo`出`<input>`标签，并将js验证代码赋给`ActiveForm`对象  \r\n3. 用`Html::submitButton`生成`<button>`标签，进行form的数据的提交\r\n4. 最后通过调用`ActiceForm::end`的静态方法，闭合`</form>`标签，并注册验证js到对应的view页面\r\n  \r\n##ActiveForm的使用方法\r\n```  \r\n<?php\r\n$form = ActiveForm::begin([\'action\' => [\'test/getpost\'],\'method\'=>\'post\']); ?> //action不进行配置时，默认选择当前view页面的Action method默认选择post\r\n<? echo $form->field($model, \'username\')->textInput([\'maxlength\' => 20]) ?> //文本输入框\r\n<? echo $form->field($model, \'password\')->passwordInput([\'maxlength\' => 20]) ?> //密码输入框\r\n<? echo $form->field($model, \'sex\')->radioList([\'1\'=>\'男\',\'0\'=>\'女\']) ?>//单选框\r\n<? echo $form->field($model, \'edu\')->dropDownList([\'1\'=>\'大学\',\'2\'=>\'高中\',\'3\'=>\'初中\'], [\'prompt\'=>\'请选择\',\'style\'=>\'width:120px\']) ?> //下拉选择框\r\n<? echo $form->field($model, \'file\')->fileInput() ?>//文件输入\r\n<? echo $form->field($model, \'hobby\')->checkboxList([\'0\'=>\'篮球\',\'1\'=>\'足球\',\'2\'=>\'羽毛球\',\'3\'=>\'乒乓球\']) ?>//复选框\r\n<? echo $form->field($model, \'info\')->textarea([\'rows\'=>3]) ?>//文本域\r\n<? echo $form->field($model, \'userid\')->hiddenInput([\'value\'=>3]) ?>//隐藏域\r\n<? echo Html::submitButton(\'提交\', [\'class\'=>\'btn btn-primary\',\'name\' =>\'submit-button\']) ?>   \r\n<? echo Html::resetButton(\'重置\', [\'class\'=>\'btn btn-primary\',\'name\' =>\'submit-button\']) ?>\r\n<?php ActiveForm::end(); ?>  \r\n```\r\n##各个ActiveForm对比\r\n###\\yii\\bootstrap\\ActiveForm\r\n`\\yii\\bootstrap\\ActiveForm` 重写了`$fieldClass`的默认值和`init()`方法。  \r\n在`init()`方法中判断`config`中是否有配置`layout`属性，如果在`ActiveForm`的`options`属性中加入`[\'class\' => \'form.$layout\']`。  \r\n修改`$fieldClass`，在`Activeform`使用实例方法`field()`的时候创建一个`yii\\bootstrap\\ActiveField`的对象。增加了很多bootstrap样式\r\n###\\kartik\\form\\ActiveForm\r\n更丰富了一下ActiveForm的样式，`kartik\\field\\FieldRange`只支持`\\kartik\\form\\ActiveForm`。\r\n##ActiveForm配置\r\n1. `$config` 在`ActiveForm::begin()`中传入的配置，该配置为Yii::createObject()时加载的配置，配置会加载到`ActiveForm`对象。\r\n2.  `$activeform->options`除`csrf`属性外`Form`表单的的选项，`csrf`属性为是否采用`csrf`验证的开关选项（比如样式）。\r\n3.  `$activeform->fieldConfig` 使用的`ActiveFiled`对象的配置（比如filed的模板）。\r\n\r\n##ActiveForm代码\r\n###ActiveForm::begin\r\n	$form = ActiveForm::begin([config....]);\r\n	class widgets\r\n    public static function begin($config = [])\r\n    {\r\n        $config[\'class\'] = get_called_class(); //$config[\'class\'] = ActiveForm\r\n        $widget = Yii::createObject($config); //创建了一个ActiveForm对象\r\n        static::$stack[] = $widget; \r\n\r\n        return $widget; //返回ActiveForm对象\r\n    }\r\n    class activeform\r\n    public function init()\r\n    {\r\n        if (!isset($this->options[\'id\'])) {\r\n            $this->options[\'id\'] = $this->getId(); //如果没有设置id则将id设置为w0 0++ 即下次没有设置id id将为w1\r\n        }\r\n        echo Html::beginForm($this->action, $this->method, $this->options); //输出formbegin\r\n    }\r\n    class Html\r\n    public static function beginForm($action = \'\', $method = \'post\', $options = [])\r\n    {\r\n        $action = Url::to($action); //通过Url::to的方法确定$action\r\n\r\n        $hiddenInputs = [];\r\n\r\n        $request = Yii::$app->getRequest();\r\n        if ($request instanceof Request) {\r\n            if (strcasecmp($method, \'get\') && strcasecmp($method, \'post\')) {\r\n                //判断请求是否为put和delete请求\r\n                $hiddenInputs[] = static::hiddenInput($request->methodParam, $method); //建立一个input标签 type为hiddenInput name=_method value = $method\r\n                $method = \'post\'; //将method改为post\r\n            }\r\n            $csrf = ArrayHelper::remove($options, \'csrf\', true);\r\n		//config中是否设置了csrf 如果设置了$csrf为设置的值 没有则为true\r\n            if ($csrf && $request->enableCsrfValidation && strcasecmp($method, \'post\') === 0) { config中没有设置csrf且为post请求 则添加一个隐藏输入域 \r\n                $hiddenInputs[] = static::hiddenInput($request->csrfParam, $request->getCsrfToken());\r\n            }\r\n        }\r\n\r\n        if (!strcasecmp($method, \'get\') && ($pos = strpos($action, \'?\')) !== false) {\r\n            // 如果是get请求且有参数传入\r\n            foreach (explode(\'&\', substr($action, $pos + 1)) as $pair) {			//如果不是以&key=value 方法传入 则将其添加进隐藏域\r\n                if (($pos1 = strpos($pair, \'=\')) !== false) {\r\n                    $hiddenInputs[] = static::hiddenInput(\r\n                        urldecode(substr($pair, 0, $pos1)),\r\n                        urldecode(substr($pair, $pos1 + 1))\r\n                    );\r\n                } else {\r\n                    $hiddenInputs[] = static::hiddenInput(urldecode($pair), \'\');\r\n                }\r\n            }\r\n            //否则添加到$action中\r\n            $action = substr($action, 0, $pos);\r\n        }\r\n\r\n        $options[\'action\'] = $action;\r\n        $options[\'method\'] = $method;\r\n        //生成form标签\r\n        $form = static::beginTag(\'form\', $options);\r\n        if (!empty($hiddenInputs)) {\r\n        	//如果有隐藏域则将隐藏域中的标签添加到form后面\r\n            $form .= \"\\n\" . implode(\"\\n\", $hiddenInputs);\r\n        }\r\n\r\n        return $form;\r\n    }\r\n###ActiveForm::field\r\n	class activeform\r\n	public function field($model, $attribute, $options = [])\r\n    {\r\n        $config = $this->fieldConfig;\r\n        if ($config instanceof \\Closure) {\r\n        	//如果配置是一个闭包函数则\r\n            $config = call_user_func($config, $model, $attribute);\r\n        }\r\n        if (!isset($config[\'class\'])) {\r\n            $config[\'class\'] = $this->fieldClass; //如果没有在配置中指定class则使用 yii\\widgets\\ActiveField\r\n        }\r\n        return Yii::createObject(ArrayHelper::merge($config, $options, [\r\n            \'model\' => $model,\r\n            \'attribute\' => $attribute,\r\n            \'form\' => $this,\r\n        ])); //返回一个yii\\widgets\\ActiveField对象\r\n    }\r\n    \r\n    echo $form->field($model,\'username\')->textInput();\r\n	<?= $form->field($model,\'username\')->textInput(); ?>\r\n	//在echo activefield对象时候会调用php的魔术方法__toString\r\n	\r\n	class activefield\r\n	public function render($content = null)\r\n    {\r\n        if ($content === null) {\r\n        	//没有设置input/label/error/hint时候按照默认配置进行设置\r\n            if (!isset($this->parts[\'{input}\'])) {\r\n                $this->textInput();\r\n            }\r\n            if (!isset($this->parts[\'{label}\'])) {\r\n                $this->label();\r\n            }\r\n            if (!isset($this->parts[\'{error}\'])) {\r\n                $this->error();\r\n            }\r\n            if (!isset($this->parts[\'{hint}\'])) {\r\n                $this->hint(null);\r\n            }\r\n            $content = strtr($this->template, $this->parts); //按照模板将转化\r\n        } elseif (!is_string($content)) {\r\n            $content = call_user_func($content, $this);\r\n        }\r\n\r\n        return $this->begin() . \"\\n\" . $content . \"\\n\" . $this->end();\r\n    }\r\n    \r\n    public function begin()\r\n    {\r\n        if ($this->form->enableClientScript) {\r\n            $clientOptions = $this->getClientOptions();\r\n            if (!empty($clientOptions)) {\r\n                $this->form->attributes[] = $clientOptions;\r\n            }\r\n        }\r\n\r\n        $inputID = $this->getInputId();\r\n        $attribute = Html::getAttributeName($this->attribute);\r\n        $options = $this->options;\r\n        $class = isset($options[\'class\']) ? [$options[\'class\']] : [];\r\n        $class[] = \"field-$inputID\";\r\n        if ($this->model->isAttributeRequired($attribute)) {\r\n            $class[] = $this->form->requiredCssClass;\r\n        }\r\n        if ($this->model->hasErrors($attribute)) {\r\n            $class[] = $this->form->errorCssClass;\r\n        }\r\n        $options[\'class\'] = implode(\' \', $class);\r\n        $tag = ArrayHelper::remove($options, \'tag\', \'div\');\r\n\r\n        return Html::beginTag($tag, $options);\r\n    }\r\n    \r\n    public function end()\r\n    {\r\n        return Html::endTag(isset($this->options[\'tag\']) ? $this->options[\'tag\'] : \'div\');\r\n    }\r\n    \r\n###Html::submitButton\r\n```\r\n<?= Html::submitButton($model->isNewRecord ? \'创建\' : \'编辑\', [\'class\' => $model->isNewRecord ? \'btn btn-success\' : \'btn btn-primary\']) ?>\r\n```\r\n\r\n###ActiveForm::end\r\n	class widget\r\n	public static function end()\r\n    {\r\n        if (!empty(static::$stack)) {\r\n        	//在begin中我们将activeform对象添加到$stack中,现在取出,并将$stack清空\r\n            $widget = array_pop(static::$stack);\r\n            if (get_class($widget) === get_called_class()) {//判断实例的class是否和调用该静态方法的类相同\r\n                echo $widget->run();//调用activeform的run方法\r\n                return $widget;\r\n            } else {\r\n                throw new InvalidCallException(\'Expecting end() of \' . get_class($widget) . \', found \' . get_called_class());\r\n            }\r\n        } else {\r\n            throw new InvalidCallException(\'Unexpected \' . get_called_class() . \'::end() call. A matching begin() is not found.\');\r\n        }\r\n    }\r\n    \r\n    class activeform \r\n    public function run()\r\n    {\r\n        if (!empty($this->_fields)) {\r\n            throw new InvalidCallException(\'Each beginField() should have a matching endField() call.\');\r\n        }\r\n\r\n        if ($this->enableClientScript) { //是否启用客户端js验证\r\n            $id = $this->options[\'id\']; //id = w0 \r\n            $options = Json::htmlEncode($this->getClientOptions());\r\n            $attributes = Json::htmlEncode($this->attributes); //在field的begin\r\n            $view = $this->getView();\r\n            ActiveFormAsset::register($view);\r\n            $view->registerJs(\"jQuery(\'#$id\').yiiActiveForm($attributes, $options);\"); //js注册\r\n        }\r\n\r\n        echo Html::endForm();\r\n    }',1468566147,1481530799,0,'0'),(11,312,23,'Yii2扩展SearchModel使用between条件','##背景：在数据查询时,经常会使用一些范围性的条件 比如按时间查询,按金额查询等\r\n\r\n##需求：按照余额范围查询用户信息\r\n\r\n##解决方案：\r\n\r\n- Yii2提供了gii(脚手架)根据数据库信息自动生成Model和searchModel，用法在此不赘述了。\r\n\r\n- 表的结构如下。\r\n\r\n```sql\r\nCREATE TABLE `account` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `type` int(11) NOT NULL COMMENT \'用户类型\',\r\n  `externalId` varchar(32) COLLATE utf8_bin NOT NULL COMMENT \'用户身份标识\',\r\n  `payPwd` char(32) COLLATE utf8_bin DEFAULT NULL COMMENT \'密码\',\r\n  `money` bigint(20) DEFAULT \'0\' COMMENT \'余额\',\r\n  `username` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT \'用户名\',\r\n  `registerTime` datetime NOT NULL COMMENT \'注册时间\',\r\n  `phoneNumber` char(11) COLLATE utf8_bin DEFAULT \'\' COMMENT \'电话号码\',\r\n  `realName` varchar(64) COLLATE utf8_bin DEFAULT \'\' COMMENT \'真实姓名\',\r\n  `status` tinyint(4) DEFAULT \'1\' COMMENT \'状态\',\r\n  `openId` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT \'微信身份标识\',\r\n  `appOpenId` varchar(32) COLLATE utf8_bin DEFAULT \'\',\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `account_type_externalId` (`type`,`externalId`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin\r\n\r\n```\r\n- 回到问题，我们想添加between条件：查询money字段大于minMoney小于maxMoney的记录。下面是代码实现：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace pay\\models;\r\n\r\nuse Yii;\r\nuse yii\\base\\Model;\r\nuse yii\\data\\ActiveDataProvider;\r\nuse pay\\models\\Account;\r\n\r\n/**\r\n * AccountSearch represents the model behind the search form about `pay\\models\\Account`.\r\n */\r\nclass AccountSearch extends Account\r\n{\r\n    public $minMoney;\r\n    public $maxMoney;\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    public function rules()\r\n    {\r\n        return [\r\n            [[\'id\', \'type\', \'money\', \'status\', \'minMoney\', \'maxMoney\'], \'integer\'],\r\n            [[\'externalId\', \'payPwd\', \'username\', \'registerTime\', \'phoneNumber\', \'realName\', \'openId\', \'appOpenId\'], \'safe\'],\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    public function scenarios()\r\n    {\r\n        // bypass scenarios() implementation in the parent class\r\n        return Model::scenarios();\r\n    }\r\n\r\n    /**\r\n     * Creates data provider instance with search query applied\r\n     *\r\n     * @param array $params\r\n     *\r\n     * @return ActiveDataProvider\r\n     */\r\n    public function search($params)\r\n    {\r\n        $query = Account::find();\r\n\r\n        $dataProvider = new ActiveDataProvider([\r\n            \'query\' => $query,\r\n        ]);\r\n\r\n        $this->load($params);\r\n\r\n        if (!$this->validate()) {\r\n            // uncomment the following line if you do not want to return any records when validation fails\r\n            // $query->where(\'0=1\');\r\n            return $dataProvider;\r\n        }\r\n\r\n        $query->andFilterWhere([\r\n            \'id\' => $this->id,\r\n            \'type\' => $this->type,\r\n            \'registerTime\' => $this->registerTime,\r\n            \'status\' => $this->status,\r\n        ])->andFilterWhere([\'between\', \'money\', $this->minMoney, $this->maxMoney]);\r\n\r\n        $query->andFilterWhere([\'like\', \'externalId\', $this->externalId])\r\n            ->andFilterWhere([\'like\', \'payPwd\', $this->payPwd])\r\n            ->andFilterWhere([\'like\', \'username\', $this->username])\r\n            ->andFilterWhere([\'like\', \'phoneNumber\', $this->phoneNumber])\r\n            ->andFilterWhere([\'like\', \'realName\', $this->realName])\r\n            ->andFilterWhere([\'like\', \'openId\', $this->openId])\r\n            ->andFilterWhere([\'like\', \'appOpenId\', $this->appOpenId]);\r\n\r\n        return $dataProvider;\r\n    }\r\n}\r\n\r\n```\r\n\r\n##分析：\r\n\r\n- git diff的代码片段\r\n\r\n```php\r\n class AccountSearch extends Account\r\n {\r\n+    public $minMoney;\r\n+    public $maxMoney;\r\n+\r\n     /**\r\n      * @inheritdoc\r\n      */\r\n     public function rules()\r\n     {\r\n         return [\r\n-            [[\'id\', \'type\', \'money\', \'status\'], \'integer\'],\r\n+            [[\'id\', \'type\', \'money\', \'status\', \'minMoney\', \'maxMoney\'], \'integer\'],\r\n             [[\'externalId\', \'payPwd\', \'username\', \'registerTime\', \'phoneNumber\', \'realName\', \'openId\', \'appOpenId\'], \'safe\'],\r\n         ];\r\n     }\r\n@@ -58,10 +61,9 @@ class AccountSearch extends Account\r\n         $query->andFilterWhere([\r\n             \'id\' => $this->id,\r\n             \'type\' => $this->type,\r\n-            \'money\' => $this->money,\r\n             \'registerTime\' => $this->registerTime,\r\n             \'status\' => $this->status,\r\n-        ]);\r\n+        ])->andFilterWhere([\'between\', \'money\', $this->minMoney, $this->maxMoney]);\r\n```\r\n\r\n- 在AccountSearch类中中添加属性minMoney和maxMoney\r\nclass AccountSearch extends Account\r\n{\r\npublic $minMoney;\r\npublic $maxMoney;\r\n}\r\n\r\n- 在rules中添加新加属性的规则，或者直接设置成safe attribute\r\n```php\r\n[[\'id\', \'type\', \'money\', \'status\', \'minMoney\', \'maxMoney\'], \'integer\'],\r\n```\r\n\r\n- 最后在filter中添加between条件\r\n\r\n```php\r\n        $query->andFilterWhere([\r\n            \'id\' => $this->id,\r\n            \'type\' => $this->type,\r\n            \'registerTime\' => $this->registerTime,\r\n            \'status\' => $this->status,\r\n        ])->andFilterWhere([\'between\', \'money\', $this->minMoney, $this->maxMoney]);\r\n\r\n```\r\n###在view中添加字段参考：\r\n[http://demos.krajee.com/field-range](http://demos.krajee.com/field-range \"http://demos.krajee.com/field-range\")\r\n###使用示例：\r\n```php\r\nuse mis\\widget\\FieldRangeWidget;\r\n<?php $form = ActiveForm::begin(); ?>\r\n<?= FieldRangeWidget::spinRange($form, $model, \'minMoney\', \'maxMoney\', \'请输入余额范围\'); ?>\r\n```\r\n- 为了方便，建议封装成一个widget，代码仅供参考。\r\n\r\n```php\r\n<?php\r\n/**\r\n * FieldRangeWidget\r\n */\r\nnamespace mis\\widgets;\r\n\r\nuse kartik\\field\\FieldRange;\r\n\r\nclass FieldRangeWidget\r\n{\r\n    public static function dateRange($form, $model, $attribute1, $attribute2, $label = \'\')\r\n    {\r\n        return FieldRange::widget([\r\n            \'form\' => $form,\r\n            \'model\' => $model,\r\n            \'attribute1\' => $attribute1,\r\n            \'attribute2\' => $attribute2,\r\n            \'label\' => $label,\r\n            \'type\' => FieldRange::INPUT_DATE,\r\n            \'useAddons\' => false,\r\n            \'widgetOptions1\' => [\r\n                \'pluginOptions\' => [\r\n                    \'format\' => \'yyyy-mm-dd\'\r\n                ]\r\n            ],\r\n            \'widgetOptions2\' => [\r\n                \'pluginOptions\' => [\r\n                    \'format\' => \'yyyy-mm-dd\'\r\n                ]\r\n            ],\r\n        ]);\r\n    }\r\n\r\n\r\n    public static function timeRange($value1, $value2, $name1, $name2, $label = \'\')\r\n    {\r\n        return FieldRange::widget([\r\n            \'name1\' => $name1,\r\n            \'name2\' => $name2,\r\n            \'value1\' => $value1,\r\n            \'value2\' => $value2,\r\n            \'label\' => $label,\r\n            \'type\' => FieldRange::INPUT_TIME,\r\n            \'useAddons\' => false,\r\n            \'widgetOptions1\' => [\r\n                \'pluginOptions\' => [\r\n                    \'showMeridian\' => false,\r\n                ]\r\n            ],\r\n            \'widgetOptions2\' => [\r\n                \'pluginOptions\' => [\r\n                    \'showMeridian\' => false,\r\n                ]\r\n            ],\r\n        ]);\r\n    }\r\n\r\n    public static function spinRange($form, $model, $attribute1, $attribute2, $label = \'\')\r\n    {\r\n        return FieldRange::widget([\r\n            \'form\' => $form,\r\n            \'model\' => $model,\r\n            \'attribute1\' => $attribute1,\r\n            \'attribute2\' => $attribute2,\r\n            \'label\' => $label,\r\n            \'type\' => FieldRange::INPUT_SPIN,\r\n            \'useAddons\' => false,\r\n        ]);\r\n    }\r\n}\r\n\r\n```',1468594151,1481726580,0,'0'),(12,312,26,'DataProvider获取查询条件','##需求：在查询数据时，有时候会统计查询字段中某一字段的总和，或者计算一些字段比例。\r\n\r\n- 本例提供一种思路处理这类问题\r\n```php\r\n    public function actionIndex()\r\n    {\r\n        $searchModel = new RefundSearch();\r\n        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);\r\n        $query = clone $dataProvider->query;\r\n        $total = $query->select([\'sum(refundFee) refundFee\', \'count(id) id\'])->asArray()->one();\r\n        return $this->render(\'index\', [\r\n            \'total\' => $total,\r\n            \'searchModel\' => $searchModel,\r\n            \'dataProvider\' => $dataProvider,\r\n        ]);\r\n    }\r\n```\r\n常规的思路是获取queryParams，然后根据这些params重新构造相同的查询条件，然后再处理想要的字段。发现这种思路有些弊端，然后在DataProvider类中发现了query这个对象，本例中的$dataProvider->query实际就相当于Refund::find()->andFilterWhere([...])，为了不改变query原有的条件，使用clone方法复制了一个相同的query对象。\r\n\r\n###query对象的两种类型\r\n\r\nActiveDataProvider implements a data provider based on [[\\yii\\db\\Query]] and [[\\yii\\db\\ActiveQuery]].\r\n\r\n ActiveDataProvider provides data by performing DB queries using [[query]].\r\n\r\nThe following is an example of using ActiveDataProvider to provide ActiveRecord instances:\r\n\r\n```php\r\n $provider = new ActiveDataProvider([\r\n     \'query\' => Post::find(),\r\n     \'pagination\' => [\r\n         \'pageSize\' => 20,\r\n     ],\r\n ]);\r\n\r\n // get the posts in the current page\r\n $posts = $provider->getModels();\r\n```\r\n\r\nAnd the following example shows how to use ActiveDataProvider without ActiveRecord:\r\n\r\n```php\r\n $query = new Query();\r\n $provider = new ActiveDataProvider([\r\n     \'query\' => $query->from(\'post\'),\r\n     \'pagination\' => [\r\n         \'pageSize\' => 20,\r\n     ],\r\n ]);\r\n\r\n // get the posts in the current page\r\n $posts = $provider->getModels();\r\n```\r\n\r\n后续会介绍Query和ActiveQuery的区别',1468596479,1479134460,0,'0'),(13,326,12,'Yii2类的属性','## **Yii属性**\r\n- 如果class继承了Object基类，那么一个成员变量可以定义为一个class的属性，然后 $this->property = $value 或者 直接 $this->property  \r\n\r\n\r\n#### **实现原理实现原理**\r\n- 是通过php的__set 和 __get 这两个魔术方法\r\n- get的时候去检查有没有 getName的方法，如果有就直接调用; 如果没有，但是有对应的setName方法就会报一个 ”属性只写“的错误，set方法没有的话就报\"unkown\" - set的时候类似，不再赘述\r\n\r\n#### **实现源码**\r\n```php\r\npublic function __get($name)              // 这里$name是属性名\r\n{\r\n    $getter = \'get\' . $name;              // getter函数的函数名\r\n    if (method_exists($this, $getter)) {\r\n        return $this->$getter();          // 调用了getter函数\r\n    } elseif (method_exists($this, \'set\' . $name)) {\r\n        throw new InvalidCallException(\'Getting write-only property: \'\r\n            . get_class($this) . \'::\' . $name);\r\n    } else {\r\n        throw new UnknownPropertyException(\'Getting unknown property: \'\r\n            . get_class($this) . \'::\' . $name);\r\n    }\r\n}\r\n\r\n// $name是属性名，$value是拟写入的属性值\r\npublic function __set($name, $value)\r\n{\r\n    $setter = \'set\' . $name;             // setter函数的函数名\r\n    if (method_exists($this, $setter)) {\r\n        $this->$setter($value);          // 调用setter函数\r\n    } elseif (method_exists($this, \'get\' . $name)) {\r\n        throw new InvalidCallException(\'Setting read-only property: \' .\r\n            get_class($this) . \'::\' . $name);\r\n    } else {\r\n        throw new UnknownPropertyException(\'Setting unknown property: \'\r\n            . get_class($this) . \'::\' . $name);\r\n    }\r\n} \r\n```\r\n\r\n##### **Tips**\r\n有几点值得注意\r\n- 由于自动调用 __get() __set() 的时机仅仅发生在访问不存在的成员变量时。 因此，如果定义了成员变量 public $title 那么，就算定义了 getTitle()setTitle() ， 他们也不会被调用。因为 $post->title 时，会直接指向该 pulic $title ， __get()__set()是不会被调用的。从根上就被切断了。\r\n- 由于PHP对于类方法不区分大小写，即大小写不敏感， $post->getTitle() 和$post->gettitle() 是调用相同的函数。 因此， $post->title 和 $post->Title 是同一个属性。即属性名也是不区分大小写的。\r\n- 由于 __get()__set() 都是public的， 无论将 getTitle()setTitle() 声明为 public, private, protected， 都没有意义，外部同样都是可以访问。所以，所有的属性都是public的。\r\n- 由于 __get()__set() 都不是static的，因此，没有办法使用static 的属性。\r\n',1469004750,1481530833,0,'0'),(14,218,13,'Yii2核心验证器','# 核心验证器\r\nYii2提供了一系列的核心验证器，这篇文章总体上介绍了一下核心验证器的使用方法：\r\n\r\n### boolean真假验证器\r\n- 检查0和1、真或者假等情况，可以自定义trueValue和falseValue\r\n- 严格模式，在严格模式下，当前值和对照值采用===作比较\r\n- 存在客户端验证，并默认开启\r\n\r\n```php\r\n[\r\n    [\'selected\', \'boolean\'],\r\n    [\'deleted\', \'boolean\', \'trueValue\' => true, \'falseValue\' => false, \'strict\' => true],\r\n]\r\n```\r\n\r\n### captcha图片验证码\r\n- 需要先实现图片验证码接口\r\n- 需要制定图片验证码接口地址，默认为site/captcha\r\n- 会进行前端hash验证\r\n\r\n```php\r\n[\r\n    [\'verificationCode\', \'captcha\'],\r\n]\r\n```\r\n\r\n### compare比较验证器\r\n- 支持==、===、!=、!==、>、>=、<、<=运算符，默认为==\r\n- 常量比较，比如比较当前属性和一个固定值的大小，\'compareValue\' => 30\r\n- 变量比较，比如比较当前属性和另外一个属性的大小，\'compareAttribute\' => \'workyears\'\r\n\r\n```php\r\n[\r\n    // 年龄必须大于或等于30\r\n    [\'age\', \'compare\', \'compareValue\' => 30, \'operator\' => \'>=\'],\r\n    // 年龄必须大于工龄\r\n    [\'age\', \'compare\', \'compareAttribute\' => \'workyears\', \'operator\' => \'>\'],\r\n]\r\n```\r\n\r\n### date日期验证器\r\n- 验证日期是否合法\r\n- 验证日期已经是否在某个日期范围内\r\n- 能指定格式format\r\n\r\n```php\r\n[\r\n    // from和to都得是合法日期\r\n    [[\'from\', \'to\'], \'date\'],\r\n    // from和to都得是日期时间，并且在2016-06-01 10:00:00和2016-07-15 20:00:00之间\r\n    [[\'from\', \'to\'], \'date\', \'format\' => \'php:Y-m-d H:i:s\', \'min\' => \'2016-06-01 10:00:00\', \'max\' => \'2016-07-15 20:00:00\'],\r\n    // from得是日期时间，并且会自动转成unixtime\r\n    [\'from\', \'date\', \'timestampAttribute\' => \'from\'],\r\n]\r\n```\r\n\r\n### default默认值验证器\r\n- 当值为空时会设置默认值\r\n- 默认值可以为固定值也可以为一个闭包函数\r\n\r\n```php\r\n[\r\n    // 若 \"country\" 为空，则将其设为 \"USA\"\r\n    [\'country\', \'default\', \'value\' => \'USA\'],\r\n    // 若 \"from\" 和 \"to\" 为空，则分别给他们分配自今天起，3 天后和 6 天后的日期。\r\n    [[\'from\', \'to\'], \'default\', \'value\' => function ($model, $attribute) {\r\n        return date(\'Y-m-d\', strtotime($attribute === \'to\' ? \'+3 days\' ：\'+6 days\'));\r\n    }],\r\n]\r\n```\r\n\r\n### double数值验证器\r\n- 底层是NumberValidator实现\r\n- 允许浮点数\r\n\r\n### each数组验证器\r\n- 数组验证器，会对数组中每个元素进行验证\r\n- rule是规则，就是rules去掉第一个元素，可以递归\r\n- allowMessageFromRule，错误是否来自rule验证器，默认为真\r\n\r\n```php\r\n[\r\n    // 检查categoryIDs是数组并且数组中每个元素是整数\r\n    [\'categoryIDs\', \'each\', \'rule\' => [\'integer\']],\r\n]\r\n```\r\n\r\n### email邮箱验证器\r\n- 邮箱格式验证器，检查是否为合法邮箱\r\n- checkDNS是否检查域名合法性，默认为假\r\n\r\n```php\r\n[\r\n    // 检查 \"email\" 是否为有效的邮箱地址\r\n    [\'email\', \'email\'],\r\n]\r\n```\r\n\r\n### exist存在验证器\r\n- 检查数据是否在数据库中存在\r\n- targetClass可以指定表\r\n- targetAttribute可以指定字段\r\n- filter可以指定查询条件\r\n\r\n```php\r\n[\r\n    // a1 需要在 \"a1\" 特性所代表的字段内存在\r\n    [\'a1\', \'exist\'],\r\n    // a1 必需存在，但检验的是 a1 的值在字段 a2 中的存在性\r\n    [\'a1\', \'exist\', \'targetAttribute\' => \'a2\'],\r\n]\r\n```',1470029626,1481534372,0,'0'),(15,14,13,'Yii2后端权限管理','##Yii2后端权限控制\r\n###在Yii2中权限控制\r\n在做应用时，尤其是后端应用时，我们需要根据用户是否登录，或者是用户的姓名职位来判断用户是否有进行某个操作的权限。\r\n在yii2中自带了两种权限控制，有ACF和RBAC两种，有的时候我们也会写一些简单的filter来进行权限控制\r\n\r\n###Yii2的ACF(存取控制过滤器)\r\nYii2的存取控制过滤器（以下简称ACF）是一种通过yii\\filter\\AccessControl类来实现的简单的授权方法，通常我们是这么使用ACF的。\r\n  \r\n```\r\n<?php\r\nnamespace pttms\\controllers;\r\n\r\nuse pttms\\models\\User;\r\nuse yii\\web\\Controller;\r\nuse yii\\filters\\AccessControl;\r\n\r\nclass TestController extends Controller\r\n{\r\n\r\n    public function behaviors()//通过behaviors将accesscontrol绑定到控制器上\r\n    {\r\n        return [\r\n            \'access\' => [\r\n                \'class\' => AccessControl::className(),\r\n                \'only\' => [\'test\',\'login\',\'logout\'],\r\n                \'rules\' => [\r\n                    [\r\n                        \'allow\' => true,\r\n                        \'actions\' => [\'login\'],\r\n                        \'roles\' => [\'?\'],\r\n                    ],[\r\n                        \'allow\' => true,\r\n                        \'actions\' => [\'test\',\'logout\'],\r\n                        \'roles\' => [\'@\'],\r\n                    ]\r\n                ]\r\n            ]\r\n        ];\r\n    }\r\n\r\n    public function actionTest()\r\n    {\r\n        var_dump(111);\r\n    }\r\n\r\n    public function actionLogin()\r\n    {\r\n        if (!\\Yii::$app->user->isGuest) {\r\n            return $this->goBack();\r\n        }\r\n        if (\\Yii::$app->request->get(\'id\') === null) {\r\n            return \'登陆失败\';\r\n        }\r\n        $this->login();\r\n        return $this->redirect(\'/test/test\');\r\n    }\r\n\r\n    public function actionLogout()\r\n    {\r\n        \\Yii::$app->user->logout();\r\n    }\r\n\r\n    public function login()\r\n    {\r\n        $user = User::findOne(134);\r\n        \\Yii::$app->user->login($user);\r\n    }\r\n}  \r\n```  \r\n\r\n\r\n\r\n###Yii2的RBAC（基于角色的存取控制）\r\nS = 主体 = 一名使用者或自动代理人\r\nR = 角色 = 被定义为一个授权等级的工作职位或职称\r\nP = 权限 = 一种存取资源的方式\r\nauth_assignment 存放授权关系，userid和角色名称\r\nauth_item 存放角色\r\nauth_item_child 存放角色层级\r\nauth_rule 存放规则\r\n主体为用户，主体和角色的关联在创建用户时添加到auth_assignment表中，权限和角色的关联在Controller中进行。  \r\n\r\n```\r\npublic function behaviors()\r\n    {\r\n        return [\r\n            \'access\' => [\r\n                \'class\' => AccessControl::className(),\r\n                \'rules\' => [\r\n                    [\r\n                        \'actions\' => [\'index\', \'create\', \'update\', \'download\', \'log\', \'view\', \'list\'],\r\n                        \'allow\' => true,\r\n                        \'roles\' => [\'cto\', \'rd-be\', \'pd\', \'pm\', \'bd\', \'bdm\', \'bdm-city\', \'bdm-district\'],\r\n                    ],\r\n                    [\r\n                        \'actions\' => [\'approve\', \'cancel\'],\r\n                        \'allow\' => true,\r\n                        \'roles\' => [\'cto\', \'rd-be\', \'pd\', \'pm\'],\r\n                    ],\r\n                ],\r\n            ],\r\n            \'verbs\' => [\r\n                \'class\' => VerbFilter::className(),\r\n                \'actions\' => [\r\n                    \'cancel\' => [\'post\'],\r\n                    \'approve\' => [\'post\'],\r\n                ],\r\n            ],\r\n        ];\r\n    }  \r\n\r\n```\r\n###PTTMS使用的简单的权限控制（目前兼职端使用的权限控制）\r\n```  \r\nclass SomeController extends Controller\r\n{\r\npublic function behaviors()\r\n    {\r\n        return array_merge(parent::behaviors(), [\r\n            \'access\' => [\r\n                \'class\' => PttmsAccessController::className(),\r\n                \'rules\' => [\r\n                    [\r\n                        \'actions\' => [\'download\'],\r\n                        \'allow\' => true,\r\n                    ],\r\n                    [\r\n                        \'actions\' => [\r\n                            \'banners\', \'reddot\', \'appmenuchild\'\r\n                        ],\r\n                        \'allow\' => true,\r\n                        \'roles\' => [\'@\'],\r\n                    ],\r\n                ]\r\n            ],\r\n        ]);\r\n    }\r\n}    \r\n\r\nclass PttmsAccessController extends AccessControl {\r\n	public function beforeAction($action)\r\n    {\r\n        foreach ($this->rules as $rule) {\r\n            if (in_array($action->id, $rule->actions)) {\r\n                if (empty($rule->roles)) {\r\n                    return true;\r\n                } elseif (in_array(self::NEED_LOGIN, $rule->roles)) {\r\n                    return $this->login($user);\r\n                } elseif (in_array(self::NEED_IDENTIFY, $rule->roles)) {\r\n                    return $this->useridentify();\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n    \r\n```\r\n###权限控制原理\r\n在控制器执行beforeAction方法时触发了trigger(\'beforeAction\')事件，在trigger时，将行为绑定到类Controller上\r\n关系如下\r\n  \r\n```  \r\n$controller->beforeAction();  \r\n$controller->trigger(self::EVENT_BEFORE_ACTION, $event);  \r\n$controller->ensureBehaviors();  \r\n$controller->attachBehaviorInternal($this->behaviors);//此时将行为绑定到Controller上$behavior->attach($this);\r\n$behavior->on(Controller::EVENT_BEFORE_ACTION, [$this, \'beforeFilter\']);\r\n$accessfilter->beforeFilter();\r\n$accesscontrol->beforeAction;\r\n```\r\n\r\n在```$accesscontrol->beforeAction```中进行权限的判断\r\n  \r\n```  \r\nclass AccessControl {\r\npublic function beforeAction($action)\r\n    {\r\n        $user = $this->user;\r\n        $request = Yii::$app->getRequest();\r\n        /* @var $rule AccessRule */\r\n        foreach ($this->rules as $rule) {\r\n            if ($allow = $rule->allows($action, $user, $request)) {\r\n                return true;\r\n            } elseif ($allow === false) {\r\n                if (isset($rule->denyCallback)) {\r\n                    call_user_func($rule->denyCallback, $rule, $action);\r\n                } elseif ($this->denyCallback !== null) {\r\n                    call_user_func($this->denyCallback, $rule, $action);\r\n                } else {\r\n                    $this->denyAccess($user);\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n        if ($this->denyCallback !== null) {\r\n            call_user_func($this->denyCallback, null, $action);\r\n        } else {\r\n            $this->denyAccess($user);\r\n        }\r\n        return false;\r\n    }  \r\n}\r\nclass AccessRule\r\n{\r\npublic function allows($action, $user, $request)\r\n    {\r\n        if ($this->matchAction($action)\r\n            && $this->matchRole($user)\r\n            && $this->matchIP($request->getUserIP())\r\n            && $this->matchVerb($request->getMethod())\r\n            && $this->matchController($action->controller)\r\n            && $this->matchCustom($action)\r\n        ) {\r\n            return $this->allow ? true : false;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    \r\nprotected function matchRole($user)\r\n    {\r\n        if (empty($this->roles)) {\r\n            return true;\r\n        }\r\n        foreach ($this->roles as $role) {\r\n            if ($role === \'?\') {\r\n                if ($user->getIsGuest()) {\r\n                    return true;\r\n                }\r\n            } elseif ($role === \'@\') {\r\n                if (!$user->getIsGuest()) {\r\n                    return true;\r\n                }\r\n            } elseif ($user->can($role)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\nclass yii\\web\\User\r\n{\r\n	public function can($permissionName, $params = [], $allowCaching = true)\r\n    {\r\n        if ($allowCaching && empty($params) && isset($this->_access[$permissionName])) {\r\n            return $this->_access[$permissionName];\r\n        }\r\n        if (($manager = $this->getAuthManager()) === null) {\r\n            return false;\r\n        }\r\n        $access = $manager->checkAccess($this->getId(), $permissionName, $params);\r\n        if ($allowCaching && empty($params)) {\r\n            $this->_access[$permissionName] = $access;\r\n        }\r\n\r\n        return $access;\r\n    }\r\n}\r\n\r\nclass DbManager\r\n{\r\npublic function checkAccess($userId, $permissionName, $params = [])\r\n    {\r\n        $assignments = $this->getAssignments($userId);\r\n        $this->loadFromCache();\r\n        if ($this->items !== null) {\r\n            return $this->checkAccessFromCache($userId, $permissionName, $params, $assignments);\r\n        } else {\r\n            return $this->checkAccessRecursive($userId, $permissionName, $params, $assignments);\r\n        }\r\n    }\r\n    \r\n   \r\n    protected function checkAccessRecursive($user, $itemName, $params, $assignments)\r\n    {\r\n        if (($item = $this->getItem($itemName)) === null) {\r\n            return false;\r\n        }\r\n\r\n        Yii::trace($item instanceof Role ? \"Checking role: $itemName\" : \"Checking permission: $itemName\", __METHOD__);\r\n\r\n        if (!$this->executeRule($user, $item, $params)) {\r\n            return false;\r\n        }\r\n\r\n        if (isset($assignments[$itemName]) || in_array($itemName, $this->defaultRoles)) {\r\n            return true;\r\n        }\r\n\r\n        $query = new Query;\r\n        $parents = $query->select([\'parent\'])\r\n            ->from($this->itemChildTable)\r\n            ->where([\'child\' => $itemName])\r\n            ->column($this->db);\r\n        foreach ($parents as $parent) {\r\n            if ($this->checkAccessRecursive($user, $parent, $params, $assignments)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\n```',1471597626,1481534345,0,'0'),(16,312,13,'Yii2 GridView介绍(基础使用)','## 演示示例 \r\n准备工作\r\n\r\n- 数据库字段如下:\r\n```sql\r\nCREATE TABLE `trade` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `accountType` tinyint(4) NOT NULL,\r\n  `externalId` varchar(32) COLLATE utf8_bin DEFAULT NULL,\r\n  `body` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT \'商品说明\',\r\n  `feeType` varchar(5) COLLATE utf8_bin DEFAULT NULL COMMENT \'货币类型\',\r\n  `totalFee` int(11) DEFAULT NULL COMMENT \'总金额\',\r\n  `giftFee` int(11) DEFAULT NULL COMMENT \'除去订单支付之外的额外金额\',\r\n  `orderId` varchar(32) COLLATE utf8_bin NOT NULL COMMENT \'订单号\',\r\n  `openId` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT \'微信支付身份标识\',\r\n  `requestTime` datetime NOT NULL COMMENT \'受理时间\',\r\n  `returnUrl` varchar(150) COLLATE utf8_bin DEFAULT NULL COMMENT \'跳转地址\',\r\n  `status` tinyint(4) NOT NULL COMMENT \'状态\',\r\n  `payType` varchar(15) COLLATE utf8_bin DEFAULT NULL COMMENT \'支付方式\',\r\n  `tradeType` tinyint(4) DEFAULT NULL COMMENT \'交易类型\',\r\n  `cashFee` int(11) DEFAULT NULL COMMENT \'第三方返回实际支付金额\',\r\n  `resultTime` datetime DEFAULT NULL COMMENT \'完成时间\',\r\n  `bankType` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT \'银行类型\',\r\n  `outTradeId` varchar(32) COLLATE utf8_bin NOT NULL DEFAULT \'\' COMMENT \'第三方订单号\',\r\n  `expiredTime` bigint(20) unsigned NOT NULL DEFAULT \'0\' COMMENT \'过期时间\',\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `type_orderId` (`accountType`,`orderId`),\r\n  KEY `requestTime_status` (`requestTime`,`status`),\r\n  KEY `IDX_ORDERID_STATUS` (`orderId`,`status`),\r\n  KEY `inx_payType_status` (`payType`,`status`),\r\n  KEY `IDX_TYPE_ORDER` (`accountType`,`orderId`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=3806 DEFAULT CHARSET=utf8 COLLATE=utf8_bin\r\n```\r\n- 首先根据数据库表生成对应的model,命令如下:\r\n```bash\r\nphp yii gii/model --tableName=\"trade\" --ns=\"pay\\models\" --modelClass=\"Trade\" --db=\"paydb\"\r\n```\r\n- 然后根据model再生成controller,searchModel以及视图文件,使用命令如下:\r\n```bash\r\nphp yii gii/crud --modelClass=\"pay\\models\\Trade\" --controllerClass=\"mis\\controllers\\TradeController\" --searchModelClass=\"mis\\models\\TradeSearch\" --viewPath=\"mis\\views\\trade\"\r\n```\r\n## 更改生成的index.php文件\r\n\r\n```\r\n    <?= GridView::widget([\r\n        \'responsiveWrap\' => false,\r\n        \'dataProvider\' => $dataProvider,\r\n        \'filterModel\' => $searchModel,\r\n        \'panel\' => [\r\n            \'heading\' => \'<h3 class=\"panel-title\"><i class=\"glyphicon glyphicon-globe\"></i> 交易记录</h3>\',\r\n            \'type\' => \'success\',\r\n            \'before\' => Html::a(\'<i class=\"glyphicon glyphicon-plus\"></i> 创建\', [\'create\'], [\'class\' => \'btn btn-success\']),\r\n            \'after\' => Html::a(\'<i class=\"glyphicon glyphicon-repeat\"></i> \', [\'index\'], [\'class\' => \'btn btn-info\']),\r\n            \'footer\' => false\r\n        ],\r\n        \'pjax\' => true,\r\n        \'columns\' => [\r\n            \'id\',\r\n//            [\r\n//                \'class\' => \'\\kartik\\grid\\ExpandRowColumn\',\r\n//                \'value\' => function ($model, $key, $index) {\r\n//                    return GridView::ROW_EXPANDED;\r\n//                },\r\n//                \'detail\' => function ($model, $key, $index) {\r\n//                    return $model->body;\r\n//                }\r\n//            ],\r\n            [\r\n                \'attribute\' => \'accountType\',\r\n                \'width\' => \'310px\',\r\n                \'value\' => function ($model, $key, $index, $widget) {\r\n                    return $model->accountType;\r\n                },\r\n                \'filterType\' => GridView::FILTER_SELECT2,\r\n                \'filter\' => ArrayHelper::map(\\pay\\models\\Trade::find()->asArray()->all(), \'accountType\', \'accountType\'),\r\n                \'filterWidgetOptions\' => [\r\n                    \'pluginOptions\' => [\'allowClear\' => true],\r\n                ],\r\n                \'filterInputOptions\' => [\'placeholder\' => \'accountType\'],\r\n                \'group\' => true,  // enable grouping\r\n            ],\r\n            \'externalId\',\r\n            [\r\n                \'class\' => \'kartik\\grid\\EditableColumn\',\r\n                \'attribute\' => \'body\',\r\n                \'pageSummary\' => true,\r\n                \'editableOptions\' => function ($model, $key, $index) {\r\n                    return [\r\n                        \'header\' => \'body\',\r\n                        \'size\' => \'md\',\r\n                        \'afterInput\' => function ($form, $widget) use ($model, $index) {\r\n                            return $form->field($model, \"body\")->widget(\\kartik\\widgets\\ColorInput::classname(), [\r\n                                \'showDefaultPalette\' => false,\r\n                                \'options\' => [\'id\' => \"body-{$index}\"],\r\n                                \'pluginOptions\' => [\r\n                                    \'showPalette\' => true,\r\n                                    \'showPaletteOnly\' => true,\r\n                                    \'showSelectionPalette\' => true,\r\n                                    \'showAlpha\' => false,\r\n                                    \'allowEmpty\' => false,\r\n                                    \'preferredFormat\' => \'name\',\r\n                                    \'palette\' => [\r\n                                        [\"white\", \"black\", \"grey\", \"silver\", \"gold\", \"brown\"],\r\n                                        [\"red\", \"orange\", \"yellow\", \"indigo\", \"maroon\", \"pink\"],\r\n                                        [\"blue\", \"green\", \"violet\", \"cyan\", \"magenta\", \"purple\"],\r\n                                    ]\r\n                                ],\r\n                            ]);\r\n                        }\r\n                    ];\r\n                }\r\n            ],\r\n            [\r\n                \'class\' => \'kartik\\grid\\EditableColumn\',\r\n                \'attribute\' => \'feeType\',\r\n                \'pageSummary\' => true,\r\n                \'editableOptions\' => function ($model, $key, $index) {\r\n                    return [\r\n                        \'header\' => \'Fee type\',\r\n                        \'size\' => \'md\',\r\n                        \'formOptions\' => [\'action\' => [\'/trade/edittrade\']], // point to the new action\r\n                        \'afterInput\' => function ($form, $widget) use ($model, $index) {\r\n                            return $form->field($model, \"feeType\")->widget(\\kartik\\widgets\\ColorInput::classname(), [\r\n                                \'showDefaultPalette\' => false,\r\n                                \'options\' => [\'id\' => \"feeType-{$index}\"],\r\n                                \'pluginOptions\' => [\r\n                                    \'showPalette\' => true,\r\n                                    \'showPaletteOnly\' => true,\r\n                                    \'showSelectionPalette\' => true,\r\n                                    \'showAlpha\' => false,\r\n                                    \'allowEmpty\' => false,\r\n                                    \'preferredFormat\' => \'name\',\r\n                                    \'palette\' => [\r\n                                        [\"white\", \"black\", \"grey\", \"silver\", \"gold\", \"brown\"],\r\n                                        [\"red\", \"orange\", \"yellow\", \"indigo\", \"maroon\", \"pink\"],\r\n                                        [\"blue\", \"green\", \"violet\", \"cyan\", \"magenta\", \"purple\"],\r\n                                    ]\r\n                                ],\r\n                            ]);\r\n                        }\r\n                    ];\r\n                }\r\n            ],\r\n            [\r\n                \'class\' => \'kartik\\grid\\EditableColumn\',\r\n                \'attribute\' => \'totalFee\',\r\n                \'editableOptions\' => [\r\n                    \'header\' => \'总金额\',\r\n                    \'formOptions\' => [\'action\' => [\'/trade/edittrade\']], // point to the new action\r\n                    \'inputType\' => \\kartik\\editable\\Editable::INPUT_SPIN,\r\n                    \'options\' => [\'pluginOptions\' => [\'min\' => 0, \'max\' => 5000]]\r\n                ],\r\n                \'hAlign\' => \'right\',\r\n                \'vAlign\' => \'middle\',\r\n                \'width\' => \'100px\',\r\n                \'format\' => [\'decimal\', 2],\r\n                \'pageSummary\' => true\r\n            ],\r\n\r\n            \'orderId\',\r\n            \'openId\',\r\n            \'returnUrl:url\',\r\n            [\r\n                \'attribute\' => \'payType\',\r\n                \'width\' => \'310px\',\r\n                \'value\' => function ($model, $key, $index, $widget) {\r\n                    return $model->payType;\r\n                },\r\n                \'filterType\' => GridView::FILTER_SELECT2,\r\n                \'filter\' => ArrayHelper::map(\\pay\\models\\Trade::find()->orderBy(\'id\')->asArray()->all(), \'payType\', \'payType\'),\r\n                \'filterWidgetOptions\' => [\r\n                    \'pluginOptions\' => [\'allowClear\' => true],\r\n                ],\r\n                \'filterInputOptions\' => [\'placeholder\' => \'按支付方式分组\'],\r\n//                \'group\' => true,  // enable grouping\r\n            ],\r\n\r\n            \'tradeType\',\r\n            \'resultTime\',\r\n            \'expiredTime:datetime\',\r\n            [\r\n                \'class\' => \'\\kartik\\grid\\FormulaColumn\',\r\n                \'label\' => \'总计\',\r\n                \'value\' => function ($model, $key, $index, $widget) {\r\n                    $p = compact(\'model\', \'key\', \'index\');\r\n                    // Write your formula below\r\n                    return $widget->col(0, $p) + $widget->col(8, $p);\r\n                }\r\n            ],\r\n            [\r\n                \'class\' => \'kartik\\grid\\ActionColumn\',\r\n                \'width\' => \'20%\',\r\n                \'template\' => \'<div class=\"btn-group\">\r\n                  {update}\r\n                  <button type=\"button\" class=\"btn btn-warning dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                    <span class=\"caret\"></span>\r\n                    <span class=\"sr-only\">Toggle Dropdown</span>\r\n                  </button>\r\n                  <ul class=\"dropdown-menu\">\r\n                    <li>{delete}</li>\r\n                    <li>{view}</li>\r\n                    <li role=\"separator\" class=\"divider\"></li>\r\n                    <li>{log}</li>\r\n                  </ul>\r\n                </div>\',\r\n                \'header\' => \"操作\",\r\n                \'buttons\' => [\r\n                    \'view\' => function ($url, $model, $key) {\r\n                        return Html::a(\"查看\", [\"view\", \"id\" => $model->id]);\r\n                    },\r\n                    \'update\' => function ($url, $model, $key) {\r\n                        return Html::a(\'修改\', $url, [\r\n                            \'class\' => \'btn btn-warning\',\r\n                        ]);\r\n                    },\r\n                    \'delete\' => function ($url, $model, $key) {\r\n                        return Html::a(\'删除\', [\'delete\', \'id\' => $model->id], [\r\n                            \'data\' => [\r\n                                \'confirm\' => \'你确定要删除吗？\',\r\n                                \'method\' => \'post\',\r\n                            ]\r\n                        ]);\r\n                    },\r\n                    \'log\' => function ($url, $model, $key) {\r\n                        return Html::a(\"日志\", \"/mislog?tablename=trade&actionid=\" . $model->id, [\r\n                            \'target\' => \"_blank\"\r\n                        ]);\r\n                    },\r\n                ],\r\n            ],\r\n        ],\r\n    ]); ?>\r\n\r\n```',1472696369,1481634956,0,'0'),(17,312,16,'在微信浏览器中使用支付宝支付','------\r\n\r\n首先在微信浏览器中我们没法直接使用支付宝支付，但我们可以通过使用iframe加载将跳转的支付URL。\r\n\r\n## 主要分为两步：\r\n> * 渲染前端页面，更改iframe的屏幕尺寸\r\n> * 支付完成跳出iframe\r\n\r\n------\r\n\r\n### 1. 渲染前端页面\r\n\r\n```html\r\n<html>\r\n<head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\r\n    <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\"/>\r\n    <title>红领巾</title>\r\n</head>\r\n<script>\r\n    window.onload = function () {\r\n        var height = document.body.clientHeight;\r\n        var alipay = document.getElementById(\"alipay\");\r\n        alipay.style.height = height + \"px\";\r\n    }\r\n</script>\r\n<body topmargin=\"0\" leftmargin=\"0\">\r\n<iframe id=\"alipay\" name=\"alipay\" width=\"100%\" frameborder=\"0\" src=\"<?php echo $url ?>\"></iframe>\r\n</body>\r\n</html>\r\n```\r\n\r\n### 2. 跳出iframe\r\n支付时配置的有一个return_url，在return_url访问的页面中加入这段代码，实现页面的重定向。\r\n```javascript\r\n<script>\r\n    if (top.location != self.location) {\r\n        top.location = self.location;\r\n    }\r\n</script>\r\n```',1472698082,1481530770,0,'0'),(18,218,9,'Yii2前端简介','# 页面如何渲染\r\n\r\nController.render()\r\n\r\n```\r\npublic function render($view, $params = [])\r\n{\r\n    $content = $this->getView()->render($view, $params, $this);\r\n    $layoutFile = $this->findLayoutFile($this->getView());\r\n    if ($layoutFile !== false) {\r\n        return $this->getView()->renderFile($layoutFile, [\'content\' => $content], $this);\r\n    } else {\r\n        return $content;\r\n    }\r\n}\r\n```\r\n\r\n# 模板如何渲染\r\n一个最简单的模板：\r\n\r\n```\r\n<?php $this->beginPage() ?>\r\n<html>\r\n	<head>\r\n	<?php $this->head() ?>\r\n	</head>\r\n	<body>\r\n	<?php $this->beginBody() ?>\r\n	<?= $content ?>\r\n	<?php $this->endBody() ?>\r\n	</body>\r\n</html>\r\n<?php $this->endPage() ?>\r\n```\r\n\r\nbeginPage()\r\n\r\n```\r\npublic function beginPage()\r\n{\r\n    ob_start();\r\n    ob_implicit_flush(false);\r\n    $this->trigger(self::EVENT_BEGIN_PAGE);\r\n}\r\n```\r\nhead()\r\n\r\n```\r\npublic function head()\r\n{\r\n    echo self::PH_HEAD;\r\n}\r\n```\r\nbeginBody()\r\n\r\n```\r\npublic function beginBody()\r\n{\r\n    echo self::PH_BODY_BEGIN;\r\n    $this->trigger(self::EVENT_BEGIN_BODY);\r\n}\r\n```\r\nendBody()\r\n\r\n```\r\npublic function endBody()\r\n{\r\n    $this->trigger(self::EVENT_END_BODY);\r\n    echo self::PH_BODY_END;\r\n    foreach (array_keys($this->assetBundles) as $bundle) {\r\n        $this->registerAssetFiles($bundle);\r\n    }\r\n}\r\n```\r\nendPage()\r\n\r\n```\r\npublic function endPage($ajaxMode = false)\r\n{\r\n    $this->trigger(self::EVENT_END_PAGE);\r\n    $content = ob_get_clean();\r\n    echo strtr($content, [\r\n        self::PH_HEAD => $this->renderHeadHtml(),\r\n        self::PH_BODY_BEGIN => $this->renderBodyBeginHtml(),\r\n        self::PH_BODY_END => $this->renderBodyEndHtml($ajaxMode),\r\n    ]);\r\n    $this->clear();\r\n}\r\n```\r\n\r\n# 小部件如何渲染\r\n\r\n```\r\necho Select2::widget([\r\n    \'name\' => \'communityid\',\r\n    \'initValueText\' => \"\",\r\n    \'value\' => \"\",\r\n    \'id\' => \'communityid\',\r\n    \'options\' => [\'placeholder\' => \'搜索学校\'],\r\n    \'pluginOptions\' => [\r\n        \'allowClear\' => true,\r\n        \'ajax\' => [\r\n            \'url\' => \'/community/list\',\r\n            \'dataType\' => \'json\',\r\n            \'data\' => new JsExpression(\'function(params) { return {q:params.term}; }\')\r\n        ],\r\n        \'escapeMarkup\' => new JsExpression(\'function (data) { return data; }\'),\r\n        \'templateResult\' => new JsExpression(\'function(data) { return data.text; }\'),\r\n        \'templateSelection\' => new JsExpression(\'function (data) { return data.text; }\'),\r\n    ],\r\n]);\r\n```\r\n小部件的本质是什么？\r\n\r\n1. 输出html: echo $html\r\n2. 输出Js: registerJs()\r\n3. 输出Css: registerCss()\r\n\r\n小部件继承于yii\\base\\Widget，widget方法会调用其自身的run方法，如果小部件需要前端资源，那么run方法最终都会将小部件所需的前端资源通过registerAssetBundle注册到view上。\r\n\r\n\r\n# 前端资源如何发布\r\n前端资源发布的本质是什么：\r\n\r\n1. 部署前端资源\r\n2. 在页面添加前端资源的URL\r\n\r\n问题：Yii2是如何做这两件事的？\r\n',1472715687,1481713684,0,'0'),(19,312,17,'Composer assets plugin的实现','\r\n------\r\n\r\n你可能需要改变和扩展 Composer 加入自定义的功能。例如：如果你的环境对 Composer 的行为有特殊要求，而这并不适用于普通用户。又或者，你想使用 Composer 完成某些事情，而又不希望对普通用户造成影响。在这些情况下，你可以考虑创建一个插件来处理特定的逻辑。 \r\n\r\n------\r\n\r\n## 什么是 composer-asset-plugin\r\n使用composer安装Yii2项目时我们都知道，需要执行这个命令。\r\n```bash\r\ncomposer require fxp/composer-asset-plugin\r\n```\r\n实际上这个包就是一个Composer的一个插件，用来解决NPM/Bower的依赖管理。所有的Composer Plugin都需要满足下面的要求：\r\n\r\n- type 属性必须是 composer-plugin。\r\n- extra 属性必须包含一个元素class，它定义了插件类的名称（包含命名空间）。如果一个包中含有多个插件，则可以使用数组来定义类名。\r\n- 此外，你必须 require 一个特殊的资源包 composer-plugin-api，定义与你的插件相兼容的 composer plugin API 版本。\r\n```json\r\n{\r\n    \"name\": \"fxp/composer-asset-plugin\",\r\n    \"description\": \"NPM/Bower Dependency Manager for Composer\",\r\n    \"keywords\": [\"npm\", \"bower\", \"dependency manager\", \"package\", \"asset\", \"composer\", \"nodejs\"],\r\n    \"homepage\": \"https://github.com/fxpio/composer-asset-plugin\",\r\n    \"type\": \"composer-plugin\",\r\n    \"license\": \"MIT\",\r\n    \"authors\": [\r\n        {\r\n            \"name\": \"François Pluchino\",\r\n            \"email\": \"francois.pluchino@gmail.com\"\r\n        }\r\n    ],\r\n    \"require\": {\r\n        \"php\": \">=5.3.3\",\r\n        \"composer-plugin-api\": \"^1.0\"\r\n    },\r\n    \"require-dev\": {\r\n        \"composer/composer\": \"^1.0.0\"\r\n    },\r\n    \"autoload\": {\r\n        \"psr-4\": {\r\n            \"Fxp\\\\Composer\\\\AssetPlugin\\\\\": \"\"\r\n        }\r\n    },\r\n    \"autoload-dev\": {\r\n        \"psr-0\": { \"Composer\\\\Test\": \"vendor/composer/composer/tests/\" }\r\n    },\r\n    \"extra\": {\r\n        \"class\": \"Fxp\\\\Composer\\\\AssetPlugin\\\\FxpAssetPlugin\",\r\n        \"branch-alias\": {\r\n            \"dev-master\": \"1.2-dev\"\r\n        }\r\n    },\r\n    \"scripts\": {\r\n        \"test\": \"phpunit\"\r\n    }\r\n}\r\n\r\n```\r\n### 1. 使用说明\r\n\r\n[点击查看使用说明](https://github.com/fxpio/composer-asset-plugin)\r\n\r\n### 2. 源码的目录结构\r\n\r\n![](http://oss-cn-qingdao.aliyuncs.com/hljstatic/default/20160909/7b7cc12a90113001.png)\r\n\r\n### 3. 插件类 FxpAssetPlugin.php\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Fxp\\Composer\\AssetPlugin;\r\n\r\nuse Composer\\Composer;\r\nuse Composer\\DependencyResolver\\Pool;\r\nuse Composer\\EventDispatcher\\EventSubscriberInterface;\r\nuse Composer\\Installer\\InstallerEvent;\r\nuse Composer\\Installer\\InstallerEvents;\r\nuse Composer\\IO\\IOInterface;\r\nuse Composer\\Plugin\\CommandEvent;\r\nuse Composer\\Plugin\\PluginEvents;\r\nuse Composer\\Plugin\\PluginInterface;\r\nuse Composer\\Repository\\InstalledFilesystemRepository;\r\nuse Composer\\Repository\\RepositoryInterface;\r\nuse Composer\\Repository\\RepositoryManager;\r\nuse Fxp\\Composer\\AssetPlugin\\Event\\VcsRepositoryEvent;\r\nuse Fxp\\Composer\\AssetPlugin\\Repository\\VcsPackageFilter;\r\nuse Fxp\\Composer\\AssetPlugin\\Repository\\Util;\r\nuse Fxp\\Composer\\AssetPlugin\\Util\\AssetPlugin;\r\n\r\n/**\r\n * Composer plugin.\r\n *\r\n * @author François Pluchino <francois.pluchino@gmail.com>\r\n */\r\nclass FxpAssetPlugin implements PluginInterface, EventSubscriberInterface\r\n{\r\n    /**\r\n     * @var Composer\r\n     */\r\n    protected $composer;\r\n\r\n    /**\r\n     * @var IOInterface\r\n     */\r\n    protected $io;\r\n\r\n    /**\r\n     * @var RepositoryInterface[]\r\n     */\r\n    protected $repos = array();\r\n\r\n    /**\r\n     * @var Pool\r\n     */\r\n    protected $pool;\r\n\r\n    /**\r\n     * @var VcsPackageFilter\r\n     */\r\n    protected $packageFilter;\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public static function getSubscribedEvents()\r\n    {\r\n        return array(\r\n            AssetEvents::ADD_VCS_REPOSITORIES => array(\r\n                array(\'onAddVcsRepositories\', 0),\r\n            ),\r\n            PluginEvents::COMMAND => array(\r\n                array(\'onPluginCommand\', 0),\r\n            ),\r\n            InstallerEvents::PRE_DEPENDENCIES_SOLVING => array(\r\n                array(\'onPreDependenciesSolving\', 0),\r\n            ),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public function activate(Composer $composer, IOInterface $io)\r\n    {\r\n        /* @var InstalledFilesystemRepository $installedRepository */\r\n        $installedRepository = $composer->getRepositoryManager()->getLocalRepository();\r\n        $this->composer = $composer;\r\n        $this->io = $io;\r\n        $this->packageFilter = new VcsPackageFilter($composer->getPackage(), $composer->getInstallationManager(), $installedRepository);\r\n        $extra = $composer->getPackage()->getExtra();\r\n        $rm = $composer->getRepositoryManager();\r\n\r\n        AssetPlugin::addRegistryRepositories($rm, $this->packageFilter, $extra);\r\n        AssetPlugin::setVcsTypeRepositories($rm);\r\n\r\n        if (isset($extra[\'asset-repositories\']) && is_array($extra[\'asset-repositories\'])) {\r\n            $this->addRepositories($rm, $extra[\'asset-repositories\']);\r\n        }\r\n\r\n        AssetPlugin::addInstallers($composer, $io);\r\n    }\r\n    //......\r\n}\r\n\r\n```\r\n- 每一个插件都必须提供一个实现了 Composer\\Plugin\\PluginInterface 接口的类。类中的 activate() 方法在插件载入后被调用，并接收两个类的实例：Composer\\Composer 和 Composer\\IO\\IOInterface。使用这两个对象可以读取所有的配置，操作所有的内部对象和状态。\r\n- 可选的，插件还可以实现Composer\\EventDispatcher\\EventSubscriberInterface接口，为了在插件载入后自动注册事件处理程序到 EventDispatcher。\r\n\r\n### 4. 主要类的继承关系\r\n{type}表示Bower和Npm\r\n\r\n- AssetInstaller类继承于Composer\\Installer\\LibraryInstaller类，override了getInstallPath，getPackageBasePath等方法。BowerInstaller又继承于AssetInstaller并override了addIgnorePatterns这个方法。\r\n【主要实现{type}安装器】\r\n\r\n- 抽象类AbstractAssetsRepository继承于Composer\\Repository\\ComposerRepository为了方便BowerRepository和NpmRepository实现各自的方法，统一初始化Repository仓库。\r\n【主要实现了Repository仓库】\r\n\r\n- AbstractPackageConverter实现了PackageConverterInterface接口，增加了convertData，convertKey，convertDependency，getMapKeys，getMapDependencies等方法，一样的BowerPackageConverter和NpmPackageConverter继承抽象类AbstractPackageConverter。\r\n【主要实现了在Compsoer中{type}-asset/package名称到{type}的名称转换】\r\n\r\n\r\n## 参考资料\r\n- https://github.com/fxpio/composer-asset-plugin\r\n- https://getcomposer.org/doc/articles/plugins.md\r\n\r\n',1473395603,1481634926,0,'0'),(20,218,13,'Yii2-Codeception测试','# 测试的种类\r\n1. 单元测试（Unit Testing）\r\n2. 功能测试（Functional Testing）\r\n3. 验收测试（Acceptance Testing）\r\n\r\n# 为什么不测试\r\n1. 嫌测试麻烦（心理原因）\r\n2. 不知道如何写测试（技能原因）\r\n3. 项目太小不用测试\r\n4. 没有足够的时间\r\n5. 预算原因\r\n\r\n# 如何起步\r\n1. composer global require \"codeception/codeception=2.0.*\" \"codeception/specify=*\" \"codeception/verify=*\"\r\n2. composer require --dev yiisoft/yii2-faker:*\r\n3. echo \"export PATH=\\$PATH:$HOME/www/vendor/bin\" >> ~/.profile && source ~/.profile\r\n4. codeception/bin/yii migrate\r\n5. cd tests && mkdir mis && cd mis\r\n6. codecept bootstrap\r\n7. codecept build\r\n8. codecept generate:test unit User\r\n9. codecept run\r\n\r\n# 单元测试\r\n```\r\n<?php\r\nnamespace tests\\codeception\\frontend;\r\nuse frontend\\models\\PasswordLoginForm;\r\nclass MineTest extends \\Codeception\\Test\\Unit\r\n{\r\n    /**\r\n     * @var \\tests\\codeception\\frontend\\UnitTester\r\n     */\r\n    protected $tester;\r\n\r\n    protected function _before()\r\n    {\r\n    }\r\n\r\n    protected function _after()\r\n    {\r\n    }\r\n\r\n    // tests\r\n    public function testFalseLogin()\r\n    {\r\n        $model = new PasswordLoginForm([\r\n            \'username\' => \'18600441484\',\r\n            \'password\' => \'badpassword\',\r\n        ]);\r\n        $this->assertFalse($model->validate());\r\n    }\r\n\r\n    // tests\r\n    public function testCorrectLogin()\r\n    {\r\n        $model = new PasswordLoginForm([\r\n            \'username\' => \'18600441484\',\r\n            \'password\' => \'123456\',\r\n        ]);\r\n        $this->assertTrue($model->validate());\r\n    }\r\n}\r\n```\r\n\r\n# 功能测试\r\n```\r\n<?php\r\nuse tests\\codeception\\frontend\\FunctionalTester;\r\n$I = new FunctionalTester($scenario);\r\n$I->wantTo(\'检查微信配置\');\r\n$I->amOnPage(\'/site/jsconfig\');\r\n$I->see(\'wxf088cc8f4c48f416\');\r\n```\r\n\r\n# 验收测试\r\n```\r\n<?php\r\nuse tests\\codeception\\frontend\\AcceptanceTester;\r\n\r\n$I = new AcceptanceTester($scenario);\r\n$I->wantTo(\'MIS登录\');\r\n\r\n// 需要登录\r\n$I->amOnPage(\'http://mis.honglingjinclub.com/order/orders\');\r\n$I->cantSeeCurrentUrlEquals(\'/order/orders\');\r\n$I->see(\'登录\');\r\n$I->seeElement(\'input\', [\'id\' => \"loginform-login\"]);\r\n$I->seeElement(\'input\', [\'name\' => \"LoginForm[password]\"]);\r\n\r\n// 登录失败\r\n$I->fillField([\'id\' => \"loginform-login\"], \'liwei\');\r\n$I->fillField([\'name\' => \"LoginForm[password]\"], \'badpassword\');\r\n$I->click(\'登录\');\r\n$I->seeCurrentUrlMatches(\'/account\\/login/\');\r\n\r\n// 登录成功\r\n$I->fillField([\'id\' => \"loginform-login\"], \'liwei\');\r\n$I->fillField([\'name\' => \"LoginForm[password]\"], \'12345678\');\r\n$I->click(\'登录\');\r\n$I->seeCurrentUrlEquals(\'/order/orders\');\r\n$I->canSee(\'订单列表\');\r\n```\r\n',1475223997,1481706885,0,'0'),(21,312,20,'Composer源码阅读','\r\n```bash\r\ngit clone git@github.com:composer/composer.git\r\n```\r\n##Composer项目目录\r\n```\r\n├── bin\r\n├── doc\r\n├── res\r\n├── src\r\n├── tests\r\n├── vendor\r\n├── composer.json\r\n├── composer.lock\r\n└── README.md\r\n```\r\n> * bin 可执行文件\r\n> * doc composer使用说明文档\r\n> * res 一些json文件\r\n> * src 核心功能源代码\r\n> * tests 代码测试目录\r\n> * vendor composer依赖的组件\r\n\r\n##bin目录\r\n```\r\n├── compile\r\n└── composer\r\n```\r\n> * compile 编译composer 输出composer.phar文件\r\n> * composer 运行入口文件\r\n\r\n##src目录\r\n```\r\n├── Composer\r\n    ├── Autoload\r\n    ├── Command\r\n    ├── Config\r\n    ├── Console\r\n    ├── DependencyResolver\r\n    ├── Downloader\r\n    ├── EventDispatcher\r\n    ├── Exception\r\n    ├── Installer\r\n    ├── IO\r\n    ├── Json\r\n    ├── Package\r\n    ├── Plugin\r\n    ├── Repository\r\n    ├── Script\r\n    ├── SelfUpdate\r\n    ├── Util\r\n    ├── Cache.php\r\n    ├── Compiler.php\r\n    ├── Composer.php\r\n    ├── Config.php\r\n    ├── Factory.php\r\n    ├── Installer.php\r\n    └── XdebugHandler.php\r\n```\r\n[composer 项目的Apidoc地址](https://getcomposer.org/apidoc/master/index.html)\r\n\r\n> * Autoload\r\n自动生成autoload等文件的类\r\n> * Command\r\n每个命令的实现类，介绍详细命令时会逐个介绍\r\n> * Config\r\n读取配置文件的类\r\n> * Console\r\nApplication.php的存放位置\r\n> * DependencyResolver\r\n依赖解析使用到的功能\r\n> * Downloader\r\ncomposer下载器，包括各类请求方式及下载管理\r\n> * EventDispatcher\r\n事件分发器，处理事件的监听，订阅，调度\r\n> * Exception\r\n异常处理\r\n> * Installer\r\ncomposer安装器功能的实现\r\n> * IO\r\n输入输出\r\n> * Json\r\n对Json文件的解析\r\n> * Package\r\n第三方包的处理（很重要）\r\n> * Plugin\r\n管理第三方开发的composer plugin\r\n> * Repository\r\n管理仓库 包括本地仓库\r\n> * Script\r\n脚本事件的处理\r\n> * SelfUpdate\r\n自更新的版本号 说明等信息\r\n> * Util\r\n常用工具库\r\n> * Cache.php 文件缓存类\r\n> * Compiler.php 编译composer的类\r\n> * Composer.php Composer类\r\n> * Factory.php 工厂类 创建不同类的实例\r\n> * Installer.php 安装器类\r\n\r\n## 从第一条命令说起\r\n```bash\r\nphp bin/composer\r\n```\r\n### 入口文件 bin/composer\r\n\r\n在入口文件处主要创建了应用程序的一个实例，XdebugHandle暂时忽略\r\n```php\r\nuse Composer\\Console\\Application;\r\n//...\r\n$application = new Application();\r\n$application->run(null, $output);\r\n```\r\n### 应用程序启动\r\nComposer\\Console\\Application类继承与Symfony\\Component\\Console\\Application\r\n在父类的构造方法中初始化了composer的版本等信息，执行run方法时如果$input和$output不存在则实例化ArgvInput和ConsoleOutputinput两个实例，加载默认配置，并将实例传给类中的doRun方法，以实现命令行的输入输出功能。出现异常时则抛出异常。部分代码如下：（代码中包含注释）\r\n\r\n*** Composer\\Console\\Application.php ***\r\n```\r\n<?php\r\n\r\n/*\r\n * This file is part of Composer.\r\n *\r\n * (c) Nils Adermann <naderman@naderman.de>\r\n *     Jordi Boggiano <j.boggiano@seld.be>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nnamespace Composer\\Console;\r\n\r\nuse Composer\\Util\\Platform;\r\nuse Composer\\Util\\Silencer;\r\nuse Symfony\\Component\\Console\\Application as BaseApplication;\r\nuse Symfony\\Component\\Console\\Input\\InputInterface;\r\nuse Symfony\\Component\\Console\\Input\\InputOption;\r\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\r\nuse Composer\\Command;\r\nuse Composer\\Composer;\r\nuse Composer\\Factory;\r\nuse Composer\\IO\\IOInterface;\r\nuse Composer\\IO\\ConsoleIO;\r\nuse Composer\\Json\\JsonValidationException;\r\nuse Composer\\Util\\ErrorHandler;\r\nuse Composer\\EventDispatcher\\ScriptExecutionException;\r\nuse Composer\\Exception\\NoSslException;\r\n\r\n/**\r\n * The console application that handles the commands\r\n *\r\n * @author Ryan Weaver <ryan@knplabs.com>\r\n * @author Jordi Boggiano <j.boggiano@seld.be>\r\n * @author François Pluchino <francois.pluchino@opendisplay.com>\r\n */\r\nclass Application extends BaseApplication\r\n{\r\n    /**\r\n     * @var Composer\r\n     */\r\n    protected $composer;\r\n\r\n    /**\r\n     * @var IOInterface\r\n     */\r\n    protected $io;\r\n\r\n    private static $logo = \'   ______\r\n  / ____/___  ____ ___  ____  ____  ________  _____\r\n / /   / __ \\/ __ `__ \\/ __ \\/ __ \\/ ___/ _ \\/ ___/\r\n/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /\r\n\\____/\\____/_/ /_/ /_/ .___/\\____/____/\\___/_/\r\n                    /_/\r\n\';\r\n\r\n    private $hasPluginCommands = false;\r\n    private $disablePluginsByDefault = false;\r\n\r\n    public function __construct()\r\n    {\r\n        static $shutdownRegistered = false;\r\n\r\n        if (function_exists(\'ini_set\') && extension_loaded(\'xdebug\')) {\r\n            ini_set(\'xdebug.show_exception_trace\', false);\r\n            ini_set(\'xdebug.scream\', false);\r\n        }\r\n\r\n        if (function_exists(\'date_default_timezone_set\') && function_exists(\'date_default_timezone_get\')) {\r\n            date_default_timezone_set(Silencer::call(\'date_default_timezone_get\'));\r\n        }\r\n\r\n        if (!$shutdownRegistered) {\r\n            $shutdownRegistered = true;\r\n\r\n            register_shutdown_function(function () {\r\n                $lastError = error_get_last();\r\n\r\n                if ($lastError && $lastError[\'message\'] &&\r\n                   (strpos($lastError[\'message\'], \'Allowed memory\') !== false /*Zend PHP out of memory error*/ ||\r\n                    strpos($lastError[\'message\'], \'exceeded memory\') !== false /*HHVM out of memory errors*/)) {\r\n                    echo \"\\n\". \'Check https://getcomposer.org/doc/articles/troubleshooting.md#memory-limit-errors for more info on how to handle out of memory errors.\';\r\n                }\r\n            });\r\n        }\r\n        // 初始化Composer的版本信息\r\n        parent::__construct(\'Composer\', Composer::VERSION);\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     */\r\n    public function run(InputInterface $input = null, OutputInterface $output = null)\r\n    {\r\n        if (null === $output) {\r\n            $output = Factory::createOutput();\r\n        }\r\n        // 如果input和output不存在 在父类的run方法中会初始化\r\n        // 父类中会调用下面的doRun方法\r\n        return parent::run($input, $output);\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     */\r\n    public function doRun(InputInterface $input, OutputInterface $output)\r\n    {\r\n        // 默认不禁用插件运行命令\r\n        $this->disablePluginsByDefault = $input->hasParameterOption(\'--no-plugins\');\r\n\r\n        // 初始化输入输出io\r\n        $io = $this->io = new ConsoleIO($input, $output, $this->getHelperSet());\r\n        // io的错误处理 ErrorHandler类中实现了对error的数量\r\n        ErrorHandler::register($io);\r\n\r\n        // switch working dir\r\n        if ($newWorkDir = $this->getNewWorkingDir($input)) {\r\n            $oldWorkingDir = getcwd();\r\n            chdir($newWorkDir);\r\n            $io->writeError(\'Changed CWD to \' . getcwd(), true, IOInterface::DEBUG);\r\n        }\r\n        // 为什么会执行两次 ?\r\n        // determine command name to be executed without including plugin commands\r\n        $commandName = \'\';\r\n        if ($name = $this->getCommandName($input)) {\r\n            try {\r\n                $commandName = $this->find($name)->getName();\r\n            } catch (\\InvalidArgumentException $e) {\r\n            }\r\n        }\r\n        // 是否禁用插件\r\n        if (!$this->disablePluginsByDefault && !$this->hasPluginCommands && \'global\' !== $commandName) {\r\n            try {\r\n                // 加载插件的命令 这时会发网络请求 会初始化composer\r\n                foreach ($this->getPluginCommands() as $command) {\r\n                    if ($this->has($command->getName())) {\r\n                        $io->writeError(\'<warning>Plugin command \'.$command->getName().\' (\'.get_class($command).\') would override a Composer command and has been skipped</warning>\');\r\n                    } else {\r\n                        $this->add($command);\r\n                    }\r\n                }\r\n            } catch (NoSslException $e) {\r\n                // suppress these as they are not relevant at this point\r\n            }\r\n\r\n            $this->hasPluginCommands = true;\r\n        }\r\n\r\n        // determine command name to be executed include plugin commands, and check if it\'s a proxy command\r\n        $isProxyCommand = false;\r\n        if ($name = $this->getCommandName($input)) {\r\n            try {\r\n                $command = $this->find($name);\r\n                $commandName = $command->getName();\r\n                $isProxyCommand = ($command instanceof Command\\BaseCommand && $command->isProxyCommand());\r\n            } catch (\\InvalidArgumentException $e) {\r\n            }\r\n        }\r\n\r\n        if (!$isProxyCommand) {\r\n            $io->writeError(sprintf(\r\n                \'Running %s (%s) with %s on %s\',\r\n                Composer::VERSION,\r\n                Composer::RELEASE_DATE,\r\n                defined(\'HHVM_VERSION\') ? \'HHVM \'.HHVM_VERSION : \'PHP \'.PHP_VERSION,\r\n                php_uname(\'s\') . \' / \' . php_uname(\'r\')\r\n            ), true, IOInterface::DEBUG);\r\n\r\n            if (PHP_VERSION_ID < 50302) {\r\n                $io->writeError(\'<warning>Composer only officially supports PHP 5.3.2 and above, you will most likely encounter problems with your PHP \'.PHP_VERSION.\', upgrading is strongly recommended.</warning>\');\r\n            }\r\n\r\n            if (extension_loaded(\'xdebug\') && !getenv(\'COMPOSER_DISABLE_XDEBUG_WARN\')) {\r\n                $io->writeError(\'<warning>You are running composer with xdebug enabled. This has a major impact on runtime performance. See https://getcomposer.org/xdebug</warning>\');\r\n            }\r\n\r\n            if (defined(\'COMPOSER_DEV_WARNING_TIME\') && $commandName !== \'self-update\' && $commandName !== \'selfupdate\' && time() > COMPOSER_DEV_WARNING_TIME) {\r\n                $io->writeError(sprintf(\'<warning>Warning: This development build of composer is over 60 days old. It is recommended to update it by running \"%s self-update\" to get the latest version.</warning>\', $_SERVER[\'PHP_SELF\']));\r\n            }\r\n\r\n            if (getenv(\'COMPOSER_NO_INTERACTION\')) {\r\n                $input->setInteractive(false);\r\n            }\r\n\r\n            if (!Platform::isWindows() && function_exists(\'exec\') && !getenv(\'COMPOSER_ALLOW_SUPERUSER\')) {\r\n                if (function_exists(\'posix_getuid\') && posix_getuid() === 0) {\r\n                    if ($commandName !== \'self-update\' && $commandName !== \'selfupdate\') {\r\n                        $io->writeError(\'<warning>Do not run Composer as root/super user! See https://getcomposer.org/root for details</warning>\');\r\n                    }\r\n                    if ($uid = (int) getenv(\'SUDO_UID\')) {\r\n                        // Silently clobber any sudo credentials on the invoking user to avoid privilege escalations later on\r\n                        // ref. https://github.com/composer/composer/issues/5119\r\n                        Silencer::call(\'exec\', \"sudo -u \\\\#{$uid} sudo -K > /dev/null 2>&1\");\r\n                    }\r\n                }\r\n                // Silently clobber any remaining sudo leases on the current user as well to avoid privilege escalations\r\n                Silencer::call(\'exec\', \'sudo -K > /dev/null 2>&1\');\r\n            }\r\n\r\n            // Check system temp folder for usability as it can cause weird runtime issues otherwise\r\n            Silencer::call(function () use ($io) {\r\n                $tempfile = sys_get_temp_dir() . \'/temp-\' . md5(microtime());\r\n                if (!(file_put_contents($tempfile, __FILE__) && (file_get_contents($tempfile) == __FILE__) && unlink($tempfile) && !file_exists($tempfile))) {\r\n                    $io->writeError(sprintf(\'<error>PHP temp directory (%s) does not exist or is not writable to Composer. Set sys_temp_dir in your php.ini</error>\', sys_get_temp_dir()));\r\n                }\r\n            });\r\n\r\n            // add non-standard scripts as own commands\r\n            // 读取composer.json文件\r\n            $file = Factory::getComposerFile();\r\n            if (is_file($file) && is_readable($file) && is_array($composer = json_decode(file_get_contents($file), true))) {\r\n                if (isset($composer[\'scripts\']) && is_array($composer[\'scripts\'])) {\r\n                    foreach ($composer[\'scripts\'] as $script => $dummy) {\r\n                        if (!defined(\'Composer\\Script\\ScriptEvents::\'.str_replace(\'-\', \'_\', strtoupper($script)))) {\r\n                            if ($this->has($script)) {\r\n                                $io->writeError(\'<warning>A script named \'.$script.\' would override a Composer command and has been skipped</warning>\');\r\n                            } else {\r\n                                $this->add(new Command\\ScriptAliasCommand($script));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        try {\r\n            if ($input->hasParameterOption(\'--profile\')) {\r\n                $startTime = microtime(true);\r\n                $this->io->enableDebugging($startTime);\r\n            }\r\n            // 这时开始找命令执行了\r\n            $result = parent::doRun($input, $output);\r\n\r\n            if (isset($oldWorkingDir)) {\r\n                chdir($oldWorkingDir);\r\n            }\r\n\r\n            if (isset($startTime)) {\r\n                $io->writeError(\'<info>Memory usage: \'.round(memory_get_usage() / 1024 / 1024, 2).\'MB (peak: \'.round(memory_get_peak_usage() / 1024 / 1024, 2).\'MB), time: \'.round(microtime(true) - $startTime, 2).\'s\');\r\n            }\r\n\r\n            restore_error_handler();\r\n\r\n            return $result;\r\n        } catch (ScriptExecutionException $e) {\r\n            return $e->getCode();\r\n        } catch (\\Exception $e) {\r\n            $this->hintCommonErrors($e);\r\n            restore_error_handler();\r\n            throw $e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param  InputInterface    $input\r\n     * @throws \\RuntimeException\r\n     * @return string\r\n     */\r\n    private function getNewWorkingDir(InputInterface $input)\r\n    {\r\n        $workingDir = $input->getParameterOption(array(\'--working-dir\', \'-d\'));\r\n        if (false !== $workingDir && !is_dir($workingDir)) {\r\n            throw new \\RuntimeException(\'Invalid working directory specified, \'.$workingDir.\' does not exist.\');\r\n        }\r\n\r\n        return $workingDir;\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     */\r\n    private function hintCommonErrors($exception)\r\n    {\r\n        $io = $this->getIO();\r\n\r\n        Silencer::suppress();\r\n        try {\r\n            $composer = $this->getComposer(false, true);\r\n            if ($composer) {\r\n                $config = $composer->getConfig();\r\n\r\n                $minSpaceFree = 1024 * 1024;\r\n                if ((($df = disk_free_space($dir = $config->get(\'home\'))) !== false && $df < $minSpaceFree)\r\n                    || (($df = disk_free_space($dir = $config->get(\'vendor-dir\'))) !== false && $df < $minSpaceFree)\r\n                    || (($df = disk_free_space($dir = sys_get_temp_dir())) !== false && $df < $minSpaceFree)\r\n                ) {\r\n                    $io->writeError(\'<error>The disk hosting \'.$dir.\' is full, this may be the cause of the following exception</error>\', true, IOInterface::QUIET);\r\n                }\r\n            }\r\n        } catch (\\Exception $e) {\r\n        }\r\n        Silencer::restore();\r\n\r\n        if (Platform::isWindows() && false !== strpos($exception->getMessage(), \'The system cannot find the path specified\')) {\r\n            $io->writeError(\'<error>The following exception may be caused by a stale entry in your cmd.exe AutoRun</error>\', true, IOInterface::QUIET);\r\n            $io->writeError(\'<error>Check https://getcomposer.org/doc/articles/troubleshooting.md#-the-system-cannot-find-the-path-specified-windows- for details</error>\', true, IOInterface::QUIET);\r\n        }\r\n\r\n        if (false !== strpos($exception->getMessage(), \'fork failed - Cannot allocate memory\')) {\r\n            $io->writeError(\'<error>The following exception is caused by a lack of memory or swap, or not having swap configured</error>\', true, IOInterface::QUIET);\r\n            $io->writeError(\'<error>Check https://getcomposer.org/doc/articles/troubleshooting.md#proc-open-fork-failed-errors for details</error>\', true, IOInterface::QUIET);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param  bool                    $required\r\n     * @param  bool|null               $disablePlugins\r\n     * @throws JsonValidationException\r\n     * @return \\Composer\\Composer\r\n     */\r\n    public function getComposer($required = true, $disablePlugins = null)\r\n    {\r\n        if (null === $disablePlugins) {\r\n            $disablePlugins = $this->disablePluginsByDefault;\r\n        }\r\n\r\n        if (null === $this->composer) {\r\n            try {\r\n                //TODO 这时初始化composer 初始化时composer做了很多事情\r\n                $this->composer = Factory::create($this->io, null, $disablePlugins);\r\n            } catch (\\InvalidArgumentException $e) {\r\n                if ($required) {\r\n                    $this->io->writeError($e->getMessage());\r\n                    exit(1);\r\n                }\r\n            } catch (JsonValidationException $e) {\r\n                $errors = \' - \' . implode(PHP_EOL . \' - \', $e->getErrors());\r\n                $message = $e->getMessage() . \':\' . PHP_EOL . $errors;\r\n                throw new JsonValidationException($message);\r\n            }\r\n        }\r\n\r\n        return $this->composer;\r\n    }\r\n\r\n    /**\r\n     * Removes the cached composer instance\r\n     */\r\n    public function resetComposer()\r\n    {\r\n        $this->composer = null;\r\n    }\r\n\r\n    /**\r\n     * @return IOInterface\r\n     */\r\n    public function getIO()\r\n    {\r\n        return $this->io;\r\n    }\r\n\r\n    public function getHelp()\r\n    {\r\n        return self::$logo . parent::getHelp();\r\n    }\r\n\r\n    /**\r\n     * Initializes all the composer commands.\r\n     */\r\n    protected function getDefaultCommands()\r\n    {\r\n        // 获取父类和自身的所有命令\r\n        $commands = array_merge(parent::getDefaultCommands(), array(\r\n            new Command\\AboutCommand(),\r\n            new Command\\ConfigCommand(),\r\n            new Command\\DependsCommand(),\r\n            new Command\\ProhibitsCommand(),\r\n            new Command\\InitCommand(),\r\n            new Command\\InstallCommand(),\r\n            new Command\\CreateProjectCommand(),\r\n            new Command\\UpdateCommand(),\r\n            new Command\\SearchCommand(),\r\n            new Command\\ValidateCommand(),\r\n            new Command\\ShowCommand(),\r\n            new Command\\SuggestsCommand(),\r\n            new Command\\RequireCommand(),\r\n            new Command\\DumpAutoloadCommand(),\r\n            new Command\\StatusCommand(),\r\n            new Command\\ArchiveCommand(),\r\n            new Command\\DiagnoseCommand(),\r\n            new Command\\RunScriptCommand(),\r\n            new Command\\LicensesCommand(),\r\n            new Command\\GlobalCommand(),\r\n            new Command\\ClearCacheCommand(),\r\n            new Command\\RemoveCommand(),\r\n            new Command\\HomeCommand(),\r\n            new Command\\ExecCommand(),\r\n            new Command\\OutdatedCommand(),\r\n        ));\r\n\r\n        if (\'phar:\' === substr(__FILE__, 0, 5)) {\r\n            $commands[] = new Command\\SelfUpdateCommand();\r\n        }\r\n\r\n        return $commands;\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     */\r\n    public function getLongVersion()\r\n    {\r\n        if (Composer::BRANCH_ALIAS_VERSION) {\r\n            return sprintf(\r\n                \'<info>%s</info> version <comment>%s (%s)</comment> %s\',\r\n                $this->getName(),\r\n                Composer::BRANCH_ALIAS_VERSION,\r\n                $this->getVersion(),\r\n                Composer::RELEASE_DATE\r\n            );\r\n        }\r\n\r\n        return parent::getLongVersion() . \' \' . Composer::RELEASE_DATE;\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     */\r\n    protected function getDefaultInputDefinition()\r\n    {\r\n        $definition = parent::getDefaultInputDefinition();\r\n        $definition->addOption(new InputOption(\'--profile\', null, InputOption::VALUE_NONE, \'Display timing and memory usage information\'));\r\n        $definition->addOption(new InputOption(\'--no-plugins\', null, InputOption::VALUE_NONE, \'Whether to disable plugins.\'));\r\n        $definition->addOption(new InputOption(\'--working-dir\', \'-d\', InputOption::VALUE_REQUIRED, \'If specified, use the given directory as working directory.\'));\r\n\r\n        return $definition;\r\n    }\r\n\r\n    private function getPluginCommands()\r\n    {\r\n        $commands = array();\r\n        // 未禁用插件初始化composer 中途会下载一个package.json文件\r\n        $composer = $this->getComposer(false, false);\r\n        if (null === $composer) {\r\n            // 工厂方法 初始化global composer\r\n            $composer = Factory::createGlobal($this->io, false);\r\n        }\r\n\r\n        if (null !== $composer) {\r\n            // 获取插件管理器\r\n            $pm = $composer->getPluginManager();\r\n            foreach ($pm->getPluginCapabilities(\'Composer\\Plugin\\Capability\\CommandProvider\', array(\'composer\' => $composer, \'io\' => $this->io)) as $capability) {\r\n                // 获取插件的Commands\r\n                $newCommands = $capability->getCommands();\r\n                if (!is_array($newCommands)) {\r\n                    throw new \\UnexpectedValueException(\'Plugin capability \'.get_class($capability).\' failed to return an array from getCommands\');\r\n                }\r\n                foreach ($newCommands as $command) {\r\n                    if (!$command instanceof Command\\BaseCommand) {\r\n                        throw new \\UnexpectedValueException(\'Plugin capability \'.get_class($capability).\' returned an invalid value, we expected an array of Composer\\Command\\BaseCommand objects\');\r\n                    }\r\n                }\r\n                $commands = array_merge($commands, $newCommands);\r\n            }\r\n        }\r\n\r\n        return $commands;\r\n    }\r\n}\r\n\r\n\r\n```\r\n*** Symfony\\Component\\Console\\Application.php ***\r\n\r\n```\r\n    /**\r\n     * Runs the current application.\r\n     *\r\n     * @param InputInterface  $input  An Input instance\r\n     * @param OutputInterface $output An Output instance\r\n     *\r\n     * @return int 0 if everything went fine, or an error code\r\n     *\r\n     * @throws \\Exception When doRun returns Exception\r\n     */\r\n    public function run(InputInterface $input = null, OutputInterface $output = null)\r\n    {\r\n        if (null === $input) {\r\n            $input = new ArgvInput();\r\n        }\r\n\r\n        if (null === $output) {\r\n            $output = new ConsoleOutput();\r\n        }\r\n\r\n        $this->configureIO($input, $output);\r\n\r\n        try {\r\n            $exitCode = $this->doRun($input, $output);\r\n        } catch (\\Exception $e) {\r\n            if (!$this->catchExceptions) {\r\n                throw $e;\r\n            }\r\n\r\n            if ($output instanceof ConsoleOutputInterface) {\r\n                $this->renderException($e, $output->getErrorOutput());\r\n            } else {\r\n                $this->renderException($e, $output);\r\n            }\r\n\r\n            $exitCode = $e->getCode();\r\n            if (is_numeric($exitCode)) {\r\n                $exitCode = (int) $exitCode;\r\n                if (0 === $exitCode) {\r\n                    $exitCode = 1;\r\n                }\r\n            } else {\r\n                $exitCode = 1;\r\n            }\r\n        }\r\n\r\n        if ($this->autoExit) {\r\n            if ($exitCode > 255) {\r\n                $exitCode = 255;\r\n            }\r\n\r\n            exit($exitCode);\r\n        }\r\n\r\n        return $exitCode;\r\n    }\r\n\r\n    /**\r\n     * Runs the current application.\r\n     *\r\n     * @param InputInterface  $input  An Input instance\r\n     * @param OutputInterface $output An Output instance\r\n     *\r\n     * @return int 0 if everything went fine, or an error code\r\n     */\r\n    public function doRun(InputInterface $input, OutputInterface $output)\r\n    {\r\n        if (true === $input->hasParameterOption(array(\'--version\', \'-V\'))) {\r\n            $output->writeln($this->getLongVersion());\r\n\r\n            return 0;\r\n        }\r\n        $name = $this->getCommandName($input);\r\n        if (true === $input->hasParameterOption(array(\'--help\', \'-h\'))) {\r\n            if (!$name) {\r\n                $name = \'help\';\r\n                $input = new ArrayInput(array(\'command\' => \'help\'));\r\n            } else {\r\n                $this->wantHelps = true;\r\n            }\r\n        }\r\n\r\n        if (!$name) {\r\n            $name = $this->defaultCommand;\r\n            $input = new ArrayInput(array(\'command\' => $this->defaultCommand));\r\n        }\r\n\r\n        // the command name MUST be the first element of the input\r\n        // 根据输入的$name获取各个命令$nameCommand的实例，默认会找到ListCommand\r\n        $command = $this->find($name);\r\n        $this->runningCommand = $command;\r\n        //执行命令 最终会执行到$nameCommand类的execute()方法\r\n        $exitCode = $this->doRunCommand($command, $input, $output);\r\n        $this->runningCommand = null;\r\n\r\n        return $exitCode;\r\n    }\r\n    \r\n    /**\r\n     * Runs the current command.\r\n     *\r\n     * If an event dispatcher has been attached to the application,\r\n     * events are also dispatched during the life-cycle of the command.\r\n     *\r\n     * @param Command         $command A Command instance\r\n     * @param InputInterface  $input   An Input instance\r\n     * @param OutputInterface $output  An Output instance\r\n     *\r\n     * @return int 0 if everything went fine, or an error code\r\n     *\r\n     * @throws \\Exception when the command being run threw an exception\r\n     */\r\n    protected function doRunCommand(Command $command, InputInterface $input, OutputInterface $output)\r\n    {\r\n        foreach ($command->getHelperSet() as $helper) {\r\n            if ($helper instanceof InputAwareInterface) {\r\n                $helper->setInput($input);\r\n            }\r\n        }\r\n        if (null === $this->dispatcher) {\r\n            // 调用$nameCommand类的run方法\r\n            return $command->run($input, $output);\r\n        }\r\n\r\n        // bind before the console.command event, so the listeners have access to input options/arguments\r\n        try {\r\n            $command->mergeApplicationDefinition();\r\n            $input->bind($command->getDefinition());\r\n        } catch (ExceptionInterface $e) {\r\n            // ignore invalid options/arguments for now, to allow the event listeners to customize the InputDefinition\r\n        }\r\n\r\n        $event = new ConsoleCommandEvent($command, $input, $output);\r\n        // 事件调度 触发ConsoleEvents::COMMAND这个事件\r\n        $this->dispatcher->dispatch(ConsoleEvents::COMMAND, $event);\r\n\r\n        if ($event->commandShouldRun()) {\r\n            try {\r\n            // 这里执行的是基类Command的run方法 会初始化配置 最后执行到execute方法，继续往下看 ：）\r\n                $exitCode = $command->run($input, $output);\r\n            } catch (\\Exception $e) {\r\n                $event = new ConsoleExceptionEvent($command, $input, $output, $e, $e->getCode());\r\n                $this->dispatcher->dispatch(ConsoleEvents::EXCEPTION, $event);\r\n\r\n                $e = $event->getException();\r\n\r\n                $event = new ConsoleTerminateEvent($command, $input, $output, $e->getCode());\r\n                $this->dispatcher->dispatch(ConsoleEvents::TERMINATE, $event);\r\n\r\n                throw $e;\r\n            }\r\n        } else {\r\n            $exitCode = ConsoleCommandEvent::RETURN_CODE_DISABLED;\r\n        }\r\n\r\n        $event = new ConsoleTerminateEvent($command, $input, $output, $exitCode);\r\n        // 事件调度 触发ConsoleEvents::TERMINATE事件\r\n        $this->dispatcher->dispatch(ConsoleEvents::TERMINATE, $event);\r\n\r\n        return $event->getExitCode();\r\n    }\r\n```\r\n    \r\n### Command类\r\n\r\nSymfony\\Component\\Console\\Command\\Command.php\r\nCommand类在composer依赖的组件symfony/console中，composer各命令的都继承于此。\r\n\r\n```\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param string|null $name The name of the command; passing null means it must be set in configure()\r\n     *\r\n     * @throws LogicException When the command name is empty\r\n     */\r\n    public function __construct($name = null)\r\n    {\r\n        $this->definition = new InputDefinition();\r\n\r\n        if (null !== $name) {\r\n            $this->setName($name);\r\n        }\r\n        // 执行命令时的一些参数配置\r\n        $this->configure();\r\n\r\n        if (!$this->name) {\r\n            throw new LogicException(sprintf(\'The command defined in \"%s\" cannot have an empty name.\', get_class($this)));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs the command.\r\n     *\r\n     * The code to execute is either defined directly with the\r\n     * setCode() method or by overriding the execute() method\r\n     * in a sub-class.\r\n     *\r\n     * @param InputInterface  $input  An InputInterface instance\r\n     * @param OutputInterface $output An OutputInterface instance\r\n     *\r\n     * @return int The command exit code\r\n     *\r\n     * @throws \\Exception\r\n     *\r\n     * @see setCode()\r\n     * @see execute()\r\n     */\r\n    public function run(InputInterface $input, OutputInterface $output)\r\n    {\r\n        // force the creation of the synopsis before the merge with the app definition\r\n        $this->getSynopsis(true);\r\n        $this->getSynopsis(false);\r\n\r\n        // add the application arguments and options\r\n        // 合并默认设置的参数和在类中setDefinition设置的蚕食\r\n        $this->mergeApplicationDefinition();\r\n\r\n        // bind the input against the command specific arguments/options\r\n        try {\r\n            $input->bind($this->definition);\r\n        } catch (ExceptionInterface $e) {\r\n            if (!$this->ignoreValidationErrors) {\r\n                throw $e;\r\n            }\r\n        }\r\n        // 初始化输入输出\r\n        $this->initialize($input, $output);\r\n\r\n        if (null !== $this->processTitle) {\r\n            if (function_exists(\'cli_set_process_title\')) {\r\n                cli_set_process_title($this->processTitle);\r\n            } elseif (function_exists(\'setproctitle\')) {\r\n                setproctitle($this->processTitle);\r\n            } elseif (OutputInterface::VERBOSITY_VERY_VERBOSE === $output->getVerbosity()) {\r\n                $output->writeln(\'<comment>Install the proctitle PECL to be able to change the process title.</comment>\');\r\n            }\r\n        }\r\n        // 判断是否交互\r\n        if ($input->isInteractive()) {\r\n            $this->interact($input, $output);\r\n        }\r\n\r\n        // The command name argument is often omitted when a command is executed directly with its run() method.\r\n        // It would fail the validation if we didn\'t make sure the command argument is present,\r\n        // since it\'s required by the application.\r\n        if ($input->hasArgument(\'command\') && null === $input->getArgument(\'command\')) {\r\n            $input->setArgument(\'command\', $this->getName());\r\n        }\r\n        // 验证输入信息\r\n        $input->validate();\r\n        // 如果$this->code为空的继承Command的类的都需要实现execute方法\r\n        if ($this->code) {\r\n            $statusCode = call_user_func($this->code, $input, $output);\r\n        } else {\r\n            // 这里是命令程序的入口\r\n            $statusCode = $this->execute($input, $output);\r\n        }\r\n\r\n        return is_numeric($statusCode) ? (int) $statusCode : 0;\r\n    }\r\n```   \r\n\r\n### ListCommand\r\n\r\nSymfony\\Component\\Console\\Command\\ListCommand.php;\r\n\r\n由于继承自Command，composer默认执行的命令是list，最终会执行到ListCommand类下的execute方法。在方法中，最后会实例化一个DescriptorHelper，调用describe方法将结果展示出来。\r\n\r\n```php\r\n    protected function execute(InputInterface $input, OutputInterface $output)\r\n    {\r\n        if ($input->getOption(\'xml\')) {\r\n            @trigger_error(\'The --xml option was deprecated in version 2.7 and will be removed in version 3.0. Use the --format option instead.\', E_USER_DEPRECATED);\r\n\r\n            $input->setOption(\'format\', \'xml\');\r\n        }\r\n\r\n        $helper = new DescriptorHelper();\r\n        $helper->describe($output, $this->getApplication(), array(\r\n            \'format\' => $input->getOption(\'format\'),\r\n            \'raw_text\' => $input->getOption(\'raw\'),\r\n            \'namespace\' => $input->getArgument(\'namespace\'),\r\n        ));\r\n    }\r\n```\r\n\r\n### DescriptorHelper\r\n\r\nDescriptorHelper做了一层包装，根据不同的类型实例化不同的descriptors，最终会执行$descriptors的describe方法。\r\n\r\n最终会调用$output->write(\'...\')方法将信息输出到命令行。\r\n\r\n```php\r\n// Symfony\\Component\\Console\\Helper\\DescriptorHelper\r\n\r\n/*\r\n * This file is part of the Symfony package.\r\n *\r\n * (c) Fabien Potencier <fabien@symfony.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nnamespace Symfony\\Component\\Console\\Helper;\r\n\r\nuse Symfony\\Component\\Console\\Descriptor\\DescriptorInterface;\r\nuse Symfony\\Component\\Console\\Descriptor\\JsonDescriptor;\r\nuse Symfony\\Component\\Console\\Descriptor\\MarkdownDescriptor;\r\nuse Symfony\\Component\\Console\\Descriptor\\TextDescriptor;\r\nuse Symfony\\Component\\Console\\Descriptor\\XmlDescriptor;\r\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\r\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\r\n\r\n/**\r\n * This class adds helper method to describe objects in various formats.\r\n *\r\n * @author Jean-François Simon <contact@jfsimon.fr>\r\n */\r\nclass DescriptorHelper extends Helper\r\n{\r\n    /**\r\n     * @var DescriptorInterface[]\r\n     */\r\n    private $descriptors = array();\r\n\r\n    /**\r\n     * Constructor.\r\n     */\r\n    public function __construct()\r\n    {\r\n        $this\r\n            ->register(\'txt\', new TextDescriptor())\r\n            ->register(\'xml\', new XmlDescriptor())\r\n            ->register(\'json\', new JsonDescriptor())\r\n            ->register(\'md\', new MarkdownDescriptor())\r\n        ;\r\n    }\r\n\r\n    /**\r\n     * Describes an object if supported.\r\n     *\r\n     * Available options are:\r\n     * * format: string, the output format name\r\n     * * raw_text: boolean, sets output type as raw\r\n     *\r\n     * @param OutputInterface $output\r\n     * @param object          $object\r\n     * @param array           $options\r\n     *\r\n     * @throws InvalidArgumentException when the given format is not supported\r\n     */\r\n    public function describe(OutputInterface $output, $object, array $options = array())\r\n    {\r\n        $options = array_merge(array(\r\n            \'raw_text\' => false,\r\n            \'format\' => \'txt\',\r\n        ), $options);\r\n\r\n        if (!isset($this->descriptors[$options[\'format\']])) {\r\n            throw new InvalidArgumentException(sprintf(\'Unsupported format \"%s\".\', $options[\'format\']));\r\n        }\r\n\r\n        // $descriptor可能是TextDescriptor的实例 xml json md\r\n        $descriptor = $this->descriptors[$options[\'format\']];\r\n        $descriptor->describe($output, $object, $options);\r\n    }\r\n\r\n    /**\r\n     * Registers a descriptor.\r\n     *\r\n     * @param string              $format\r\n     * @param DescriptorInterface $descriptor\r\n     *\r\n     * @return DescriptorHelper\r\n     */\r\n    public function register($format, DescriptorInterface $descriptor)\r\n    {\r\n        $this->descriptors[$format] = $descriptor;\r\n        return $this;\r\n    }\r\n}\r\n\r\n```\r\n\r\n一个简单的命令的执行过程粗略来看就是这样，当然了内部还有很多没提到的操作。感兴趣的读者可以配置xdebug单步调试。',1476369146,1481713700,0,'0'),(22,312,31,'Composer更新缓慢的解决方法','### 首先有三个问题\r\n > * 1、composer更新为什么会慢？\r\n > * 2、已经下载的包为什么不再下载？ \r\n > * 3、怎么改进速度？\r\n\r\n要明白是什么影响了Composer的运行速度，必须先理解Composer的运行原理。Composer的大致运行步骤如下：\r\n\r\n### 分析：\r\ncomposer 执行update require命令时主要做了这些事情。\r\n> * 1.载入composer.json文件，找到配置的需要安装的第三方软件信息（version）\r\n> * 2.从localRepository缓存目录和CompoesrRepository服务器获取第三方软件packages详细信息，信息存储在一个json文件中，链接像https://packagist.com/p/all$hash.json 这样，如果安装的有第三方依赖管理插件如bower npm，此时也会从官方获取第三方软件的信息。\r\n> * 3.很重要的一步，创建Installer根据输入的参数配置，获取包require和conflict的组件，整合一起分析依赖关系，判断是否执行安装更新等操作。最终得到了需要安装的第三方软件packages信息清单。\r\n> * 4.然后根据配置信息和清单下载链接决定下载方式，source or dist，值得一说的是官方采用file_get_contents下载dist文件。\r\n> * 5.将软件包缓存在composer配置的目录下，并将第三方软件解压安装到项目中的vendor目录，生成用于载入第三方软件的autoload.php等文件并在vendor/composer目录下生成installed.json文件。\r\n\r\n### 解决方案：\r\n总体来看，瓶颈在与2、3、4步，以下为每步的解决方案：\r\n> * 第2步： Composer会因为访问Packagist官方网站变慢，我们可以通过使用Composer镜像或者代理服务器。\r\n> * 第3步 限制于PHP的运行效率，解决依赖的算法，如果用的第三方软件特别多，rules相应的也会变的特别庞大，容易造成内存不足、超时。我们可以使用hhvm或者效率较高的php7。\r\n> * 第4步 主要是下载缓慢，composer默认下载dist依赖包时采用的是file_get_contents，会阻塞其他下载任务。有个plugin解决了这个问题。composer parallel install plugin（使用了curl的多线程下载）源码地址：[https://github.com/hirak/prestissimo](https://github.com/hirak/prestissimo \"https://github.com/hirak/prestissimo\")',1476375709,1481724493,0,'0'),(23,312,40,'Composer install命令','## InstallCommand.php\r\n\r\n从composer命令的执行过程我们知道最终程序会走到InstallCommand的execute方法：\r\n\r\n在方法的执行过程中，首先根据默认配置和输入参数设置了命令，获取到composer实例，通过工厂方法创建了一个Installer实例，这个实例的初始化过程把很多组件关联在了一起。\r\n\r\n```php\r\n    protected function execute(InputInterface $input, OutputInterface $output)\r\n    {\r\n        $io = $this->getIO();\r\n        if ($args = $input->getArgument(\'packages\')) {\r\n            $io->writeError(\'<error>Invalid argument \'.implode(\' \', $args).\'. Use \"composer require \'.implode(\' \', $args).\'\" instead to add packages to your composer.json.</error>\');\r\n            return 1;\r\n        }\r\n\r\n        // 检查配置是否禁用plugins\r\n        if ($input->getOption(\'no-custom-installers\')) {\r\n            $io->writeError(\'<warning>You are using the deprecated option \"no-custom-installers\". Use \"no-plugins\" instead.</warning>\');\r\n            $input->setOption(\'no-plugins\', true);\r\n        }\r\n        // 检查配置是否安装dev包\r\n        if ($input->getOption(\'dev\')) {\r\n            $io->writeError(\'<warning>You are using the deprecated option \"dev\". Dev packages are installed by default now.</warning>\');\r\n        }\r\n        // 获取composer实例\r\n        $composer = $this->getComposer(true, $input->getOption(\'no-plugins\'));\r\n        //获取composer的下载管理器 包括git hg svn file zip等\r\n        $composer->getDownloadManager()->setOutputProgress(!$input->getOption(\'no-progress\'));\r\n        // 触发事件\r\n        $commandEvent = new CommandEvent(PluginEvents::COMMAND, \'install\', $input, $output);\r\n        $composer->getEventDispatcher()->dispatch($commandEvent->getName(), $commandEvent);\r\n\r\n        // 初始化安装器实例 安装器把io 和 Repository仓库 Downloader Packages等组件关联在一起\r\n        $install = Installer::create($io, $composer);\r\n\r\n        $preferSource = false;\r\n        $preferDist = false;\r\n\r\n        // 获取默认的配置信息\r\n        $config = $composer->getConfig();\r\n\r\n        switch ($config->get(\'preferred-install\')) {\r\n            case \'source\':\r\n                $preferSource = true;\r\n                break;\r\n            case \'dist\':\r\n                $preferDist = true;\r\n                break;\r\n            case \'auto\':\r\n            default:\r\n                // noop\r\n                break;\r\n        }\r\n        if ($input->getOption(\'prefer-source\') || $input->getOption(\'prefer-dist\')) {\r\n            $preferSource = $input->getOption(\'prefer-source\');\r\n            $preferDist = $input->getOption(\'prefer-dist\');\r\n        }\r\n        //\r\n        $optimize = $input->getOption(\'optimize-autoloader\') || $config->get(\'optimize-autoloader\');\r\n        $authoritative = $input->getOption(\'classmap-authoritative\') || $config->get(\'classmap-authoritative\');\r\n        // 安装器设置执行的各种参数 和require update 参数不同\r\n        $install\r\n            ->setDryRun($input->getOption(\'dry-run\'))\r\n            ->setVerbose($input->getOption(\'verbose\'))\r\n            ->setPreferSource($preferSource)\r\n            ->setPreferDist($preferDist)\r\n            ->setDevMode(!$input->getOption(\'no-dev\'))\r\n            ->setDumpAutoloader(!$input->getOption(\'no-autoloader\'))\r\n            ->setRunScripts(!$input->getOption(\'no-scripts\'))\r\n            ->setSkipSuggest($input->getOption(\'no-suggest\'))\r\n            ->setOptimizeAutoloader($optimize)\r\n            ->setClassMapAuthoritative($authoritative)\r\n            ->setIgnorePlatformRequirements($input->getOption(\'ignore-platform-reqs\'))\r\n        ;\r\n\r\n        if ($input->getOption(\'no-plugins\')) {\r\n            $install->disablePlugins();\r\n        }\r\n        // 最终执行到安装器的入口 执行安装过程\r\n        return $install->run();\r\n    }\r\n```\r\n\r\n### Installer.php\r\n\r\n文件有关键的一步，禁用垃圾回收器 gc_disable()\r\n\r\n- 由于PHP的GC是基于引用计数的，为了能够回收循环引用的对象，会在refcount减少但不到0的时候，试图检测并回收循环引用的孤岛对象，但当有效对象的数量及互相引用较大（比如composer中代表包、版本和互相的依赖关系）的时候，这种搜索的开销就会变得非常巨大，造成大量的CPU计算。\r\n\r\n- gc_disable 不是完全关闭 gc ，而是关闭检查循环引用计数。\r\n\r\n- composer 的这个地方是在进行依赖包检查，对于安装了大量包的项目来说，这是比较耗时、耗内存的操作，并且这部分代码（依据设计/依据提交者的看法）无需考虑循环引用计数问题。 \r\n\r\n- 因为占用内存太大，并且频繁触发 gc ，导致效率降低。\r\n\r\n\r\n整个的运行流程：\r\n\r\n- 1.判断是不是更新操作，不是的话读取lock文件。\r\n- 2.最终会获取到各个仓库Repository（Repository中可能包括PlatformRepository InstalledArray InstalledFilesystem - ComposerRepository NpmRepository BowerRepository）\r\n- 3.把Repository都加入到一个Pool池子中，$this->package从rootPackage（要安装依赖的项目）开始找白名单中的Requires和DevRequires\r\n- 4.然后初始化请求队列\r\n- 5.如果是update调到6步否则跳7步\r\n- 6.从远程获取Requires和DevRequires并加入请求队列。\r\n- 7.从本地locked文件获取加入请求队列。\r\n- 8.解决依赖（返回operations） //过程较复杂\r\n- 9.处理devPackages\r\n- 10.遍历operations获取推荐的包和请求的包信息，获取安装管理器执行安装操作\r\n- 11.处理packageUrls，为后续写入lock文件\r\n- 12.安装管理器通知安装器，处理信息后写入lock文件。\r\n- 13.最后生成autoload.php psr4 installed.json等文件，执行脚本，生成binaries文件，重新启用gc。\r\n\r\n\r\n```\r\n    /**\r\n     * Run installation (or update)\r\n     *\r\n     * @throws \\Exception\r\n     * @return int        0 on success or a positive error code on failure\r\n     */\r\n    public function run()\r\n    {\r\n        // Disable GC to save CPU cycles, as the dependency solver can create hundreds of thousands\r\n        // of PHP objects, the GC can spend quite some time walking the tree of references looking\r\n        // for stuff to collect while there is nothing to collect. This slows things down dramatically\r\n        // and turning it off results in much better performance. Do not try this at home however.\r\n        // 禁用GC 大约效率提升50% 原因下面会详细介绍\r\n\r\n        gc_collect_cycles();\r\n        gc_disable();\r\n\r\n        // Force update if there is no lock file present\r\n        // 这里判断是否更新\r\n        if (!$this->update && !$this->locker->isLocked()) {\r\n            $this->update = true;\r\n        }\r\n        // 模拟运行\r\n        if ($this->dryRun) {\r\n            $this->verbose = true;\r\n            $this->runScripts = false;\r\n            // NoopInstaller 不会安装任何package\r\n            $this->installationManager->addInstaller(new NoopInstaller);\r\n            // 模拟运行的话 会伪造本地仓库\r\n            $this->mockLocalRepositories($this->repositoryManager);\r\n        }\r\n        // 检查配置的脚本 在这时触发 composer.json文件中配置的多个脚本\r\n        if ($this->runScripts) {\r\n            // dispatch pre event\r\n            $eventName = $this->update ? ScriptEvents::PRE_UPDATE_CMD : ScriptEvents::PRE_INSTALL_CMD;\r\n            $this->eventDispatcher->dispatchScript($eventName, $this->devMode);\r\n        }\r\n\r\n        $this->downloadManager->setPreferSource($this->preferSource);\r\n        $this->downloadManager->setPreferDist($this->preferDist);\r\n\r\n        // create installed repo, this contains all local packages + platform packages (php & extensions)\r\n        // 这时候获取已安装的仓库\r\n        $localRepo = $this->repositoryManager->getLocalRepository();\r\n        if ($this->update) {\r\n            $platformOverrides = $this->config->get(\'platform\') ?: array();\r\n        } else {\r\n            $platformOverrides = $this->locker->getPlatformOverrides();\r\n        }\r\n        $platformRepo = new PlatformRepository(array(), $platformOverrides);\r\n        $installedRepo = $this->createInstalledRepo($localRepo, $platformRepo);\r\n\r\n        $aliases = $this->getRootAliases();\r\n        $this->aliasPlatformPackages($platformRepo, $aliases);\r\n\r\n        if (!$this->suggestedPackagesReporter) {\r\n            $this->suggestedPackagesReporter = new SuggestedPackagesReporter($this->io);\r\n        }\r\n\r\n        try {\r\n            // 调用doInstall 将结果 $res = $result[0];$devPackages = $result[1];\r\n            list($res, $devPackages) = $this->doInstall($localRepo, $installedRepo, $platformRepo, $aliases);\r\n            if ($res !== 0) {\r\n                return $res;\r\n            }\r\n        } catch (\\Exception $e) {\r\n            if (!$this->dryRun) {\r\n                $this->installationManager->notifyInstalls($this->io);\r\n            }\r\n\r\n            throw $e;\r\n        }\r\n        if (!$this->dryRun) {\r\n            $this->installationManager->notifyInstalls($this->io);\r\n        }\r\n\r\n        // output suggestions if we\'re in dev mode\r\n        if ($this->devMode && !$this->skipSuggest) {\r\n            $this->suggestedPackagesReporter->output($installedRepo);\r\n        }\r\n\r\n        # Find abandoned packages and warn user\r\n        foreach ($localRepo->getPackages() as $package) {\r\n            if (!$package instanceof CompletePackage || !$package->isAbandoned()) {\r\n                continue;\r\n            }\r\n\r\n            $replacement = (is_string($package->getReplacementPackage()))\r\n                ? \'Use \' . $package->getReplacementPackage() . \' instead\'\r\n                : \'No replacement was suggested\';\r\n\r\n            $this->io->writeError(\r\n                sprintf(\r\n                    \"<warning>Package %s is abandoned, you should avoid using it. %s.</warning>\",\r\n                    $package->getPrettyName(),\r\n                    $replacement\r\n                )\r\n            );\r\n        }\r\n        // 不是模拟运行时 写入lock\r\n        if (!$this->dryRun) {\r\n            // write lock\r\n            if ($this->update) {\r\n                $localRepo->reload();\r\n\r\n                $platformReqs = $this->extractPlatformRequirements($this->package->getRequires());\r\n                $platformDevReqs = $this->extractPlatformRequirements($this->package->getDevRequires());\r\n                // 把包信息更新到lock文件\r\n                $updatedLock = $this->locker->setLockData(\r\n                    array_diff($localRepo->getCanonicalPackages(), $devPackages),\r\n                    $devPackages,\r\n                    $platformReqs,\r\n                    $platformDevReqs,\r\n                    $aliases,\r\n                    $this->package->getMinimumStability(),\r\n                    $this->package->getStabilityFlags(),\r\n                    $this->preferStable || $this->package->getPreferStable(),\r\n                    $this->preferLowest,\r\n                    $this->config->get(\'platform\') ?: array()\r\n                );\r\n                if ($updatedLock) {\r\n                    $this->io->writeError(\'<info>Writing lock file</info>\');\r\n                }\r\n            }\r\n\r\n            if ($this->dumpAutoloader) {\r\n                // write autoloader\r\n                if ($this->optimizeAutoloader) {\r\n                    $this->io->writeError(\'<info>Generating optimized autoload files</info>\');\r\n                } else {\r\n                    $this->io->writeError(\'<info>Generating autoload files</info>\');\r\n                }\r\n                // 写入autoload\r\n                $this->autoloadGenerator->setDevMode($this->devMode);\r\n                $this->autoloadGenerator->setClassMapAuthoritative($this->classMapAuthoritative);\r\n                // 执行script\r\n                $this->autoloadGenerator->setRunScripts($this->runScripts);\r\n                // 写入psr4 autoload 等文件\r\n                $this->autoloadGenerator->dump($this->config, $localRepo, $this->package, $this->installationManager, \'composer\', $this->optimizeAutoloader);\r\n            }\r\n\r\n            if ($this->runScripts) {\r\n                // dispatch post event\r\n                // 监听者执行事件\r\n                $eventName = $this->update ? ScriptEvents::POST_UPDATE_CMD : ScriptEvents::POST_INSTALL_CMD;\r\n                $this->eventDispatcher->dispatchScript($eventName, $this->devMode);\r\n            }\r\n\r\n            // force binaries re-generation in case they are missing\r\n            // 重新生成bin文件\r\n            foreach ($localRepo->getPackages() as $package) {\r\n                $this->installationManager->ensureBinariesPresence($package);\r\n            }\r\n\r\n            $vendorDir = $this->config->get(\'vendor-dir\');\r\n            if (is_dir($vendorDir)) {\r\n                // suppress errors as this fails sometimes on OSX for no apparent reason\r\n                // see https://github.com/composer/composer/issues/4070#issuecomment-129792748\r\n                @touch($vendorDir);\r\n            }\r\n        }\r\n\r\n        // re-enable GC except on HHVM which triggers a warning here\r\n        if (!defined(\'HHVM_VERSION\')) {\r\n            // 安装完成重新启用gc\r\n            gc_enable();\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @param  RepositoryInterface $localRepo\r\n     * @param  RepositoryInterface $installedRepo\r\n     * @param  PlatformRepository  $platformRepo\r\n     * @param  array               $aliases\r\n     * @return array [int, PackageInterfaces[]|null] with the exit code and an array of dev packages on update, or null on install\r\n     */\r\n    protected function doInstall($localRepo, $installedRepo, $platformRepo, $aliases)\r\n    {\r\n        // init vars\r\n        $lockedRepository = null;\r\n        $repositories = null;\r\n\r\n        // initialize locked repo if we are installing from lock or in a partial update\r\n        // and a lock file is present as we need to force install non-whitelisted lock file\r\n        // packages in that case\r\n\r\n        // 如果不更新 就从本地的composer.lock文件获取包信息\r\n        if (!$this->update || (!empty($this->updateWhitelist) && $this->locker->isLocked())) {\r\n            try {\r\n                // 从lockfile中获取\r\n                $lockedRepository = $this->locker->getLockedRepository($this->devMode);\r\n            } catch (\\RuntimeException $e) {\r\n                // if there are dev requires, then we really can not install\r\n                if ($this->package->getDevRequires()) {\r\n                    throw $e;\r\n                }\r\n                // no require-dev in composer.json and the lock file was created with no dev info, so skip them\r\n                $lockedRepository = $this->locker->getLockedRepository();\r\n            }\r\n        }\r\n        // 白名单更新列表 中的依赖 composer update symfony/console\r\n        $this->whitelistUpdateDependencies(\r\n            $localRepo,\r\n            $this->package->getRequires(),\r\n            $this->package->getDevRequires()\r\n        );\r\n\r\n        $this->io->writeError(\'<info>Loading composer repositories with package information</info>\');\r\n\r\n        // 创建默认的协议 prefer\r\n        $policy = $this->createPolicy();\r\n        // creating repository pool\r\n        // 创建一个大池子\r\n        $pool = $this->createPool($this->update ? null : $lockedRepository);\r\n        $pool->addRepository($installedRepo, $aliases);\r\n        // Repository中可能包括PlatformRepository InstalledArray InstalledFilesystem\r\n        // ComposerRepository NpmRepository BowerRepository\r\n        if ($this->update) {\r\n            $repositories = $this->repositoryManager->getRepositories();\r\n            foreach ($repositories as $repository) {\r\n                $pool->addRepository($repository, $aliases);\r\n            }\r\n        }\r\n        // Add the locked repository after the others in case we are doing a\r\n        // partial update so missing packages can be found there still.\r\n        // For installs from lock it\'s the only one added so it is first\r\n        // 添加locked的仓库 原因如上 在其他都添加完成之后再添加locked仓库是因为在我们只更新部分包时 未命中的包依然能被找到\r\n        if ($lockedRepository) {\r\n            $pool->addRepository($lockedRepository, $aliases);\r\n        }\r\n        // creating requirements request\r\n        $request = $this->createRequest($this->package, $platformRepo);\r\n\r\n        if ($this->update) {\r\n            // remove unstable packages from the localRepo if they don\'t match the current stability settings\r\n            $removedUnstablePackages = array();\r\n            foreach ($localRepo->getPackages() as $package) {\r\n                if (\r\n                    !$pool->isPackageAcceptable($package->getNames(), $package->getStability())\r\n                    && $this->installationManager->isPackageInstalled($localRepo, $package)\r\n                ) {\r\n                    $removedUnstablePackages[$package->getName()] = true;\r\n                    $request->remove($package->getName(), new Constraint(\'=\', $package->getVersion()));\r\n                }\r\n            }\r\n\r\n            $this->io->writeError(\'<info>Updating dependencies\'.($this->devMode ? \' (including require-dev)\' : \'\').\'</info>\');\r\n            // 添加update-all命令\r\n            $request->updateAll();\r\n\r\n            $links = array_merge($this->package->getRequires(), $this->package->getDevRequires());\r\n            // 将request加入job队列\r\n            foreach ($links as $link) {\r\n                $request->install($link->getTarget(), $link->getConstraint());\r\n            }\r\n\r\n            // if the updateWhitelist is enabled, packages not in it are also fixed\r\n            // to the version specified in the lock, or their currently installed version\r\n            if ($this->updateWhitelist) {\r\n                $currentPackages = $this->getCurrentPackages($installedRepo);\r\n\r\n                // collect packages to fixate from root requirements as well as installed packages\r\n                $candidates = array();\r\n                foreach ($links as $link) {\r\n                    $candidates[$link->getTarget()] = true;\r\n                    $rootRequires[$link->getTarget()] = $link;\r\n                }\r\n                foreach ($currentPackages as $package) {\r\n                    $candidates[$package->getName()] = true;\r\n                }\r\n\r\n                // fix them to the version in lock (or currently installed) if they are not updateable\r\n                foreach ($candidates as $candidate => $dummy) {\r\n                    foreach ($currentPackages as $curPackage) {\r\n                        if ($curPackage->getName() === $candidate) {\r\n                            if (!$this->isUpdateable($curPackage) && !isset($removedUnstablePackages[$curPackage->getName()])) {\r\n                                $constraint = new Constraint(\'=\', $curPackage->getVersion());\r\n                                $description = $this->locker->isLocked() ? \'(locked at\' : \'(installed at\';\r\n                                $requiredAt = isset($rootRequires[$candidate]) ? \', required as \' . $rootRequires[$candidate]->getPrettyConstraint() : \'\';\r\n                                $constraint->setPrettyString($description . \' \' . $curPackage->getPrettyVersion() . $requiredAt . \')\');\r\n                                $request->install($curPackage->getName(), $constraint);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // install命令的的执行过程\r\n            $this->io->writeError(\'<info>Installing dependencies\'.($this->devMode ? \' (including require-dev)\' : \'\').\' from lock file</info>\');\r\n\r\n            if (!$this->locker->isFresh()) {\r\n                $this->io->writeError(\'<warning>Warning: The lock file is not up to date with the latest changes in composer.json. You may be getting outdated dependencies. Run update to update them.</warning>\', true, IOInterface::QUIET);\r\n            }\r\n\r\n            foreach ($lockedRepository->getPackages() as $package) {\r\n                $version = $package->getVersion();\r\n                if (isset($aliases[$package->getName()][$version])) {\r\n                    $version = $aliases[$package->getName()][$version][\'alias_normalized\'];\r\n                }\r\n                $constraint = new Constraint(\'=\', $version);\r\n                $constraint->setPrettyString($package->getPrettyVersion());\r\n                // 往请求中添加job\r\n                $request->install($package->getName(), $constraint);\r\n            }\r\n\r\n            foreach ($this->locker->getPlatformRequirements($this->devMode) as $link) {\r\n                $request->install($link->getTarget(), $link->getConstraint());\r\n            }\r\n        }\r\n\r\n        // force dev packages to have the latest links if we update or install from a (potentially new) lock\r\n        $this->processDevPackages($localRepo, $pool, $policy, $repositories, $installedRepo, $lockedRepository, \'force-links\');\r\n\r\n        // solve dependencies\r\n        $this->eventDispatcher->dispatchInstallerEvent(InstallerEvents::PRE_DEPENDENCIES_SOLVING, $this->devMode, $policy, $pool, $installedRepo, $request);\r\n        $solver = new Solver($policy, $pool, $installedRepo, $this->io);\r\n        try {\r\n            // 很重要的一步 把request->jobs队列 解决依赖\r\n            $operations = $solver->solve($request, $this->ignorePlatformReqs);\r\n            $this->eventDispatcher->dispatchInstallerEvent(InstallerEvents::POST_DEPENDENCIES_SOLVING, $this->devMode, $policy, $pool, $installedRepo, $request, $operations);\r\n        } catch (SolverProblemsException $e) {\r\n            $this->io->writeError(\'<error>Your requirements could not be resolved to an installable set of packages.</error>\', true, IOInterface::QUIET);\r\n            $this->io->writeError($e->getMessage());\r\n\r\n            return array(max(1, $e->getCode()), array());\r\n        }\r\n\r\n        $this->io->writeError(\"Analyzed \".count($pool).\" packages to resolve dependencies\", true, IOInterface::VERBOSE);\r\n        $this->io->writeError(\"Analyzed \".$solver->getRuleSetSize().\" rules to resolve dependencies\", true, IOInterface::VERBOSE);\r\n\r\n        // force dev packages to be updated if we update or install from a (potentially new) lock\r\n        $operations = $this->processDevPackages($localRepo, $pool, $policy, $repositories, $installedRepo, $lockedRepository, \'force-updates\', $operations);\r\n\r\n        // execute operations\r\n        if (!$operations) {\r\n            $this->io->writeError(\'Nothing to install or update\');\r\n        }\r\n\r\n        /**\r\n         * Workaround: if your packages depend on plugins, we must be sure\r\n         * that those are installed / updated first; else it would lead to packages\r\n         * being installed multiple times in different folders, when running Composer\r\n         * twice.\r\n         */\r\n        $operations = $this->movePluginsToFront($operations);\r\n        /**\r\n         * Removals of packages should be executed before installations in\r\n         * case two packages resolve to the same path (due to custom installers)\r\n         */\r\n        $operations = $this->moveUninstallsToFront($operations);\r\n\r\n        // extract dev packages and mark them to be skipped if it\'s a --no-dev install or update\r\n        // we also force them to be uninstalled if they are present in the local repo\r\n        if ($this->update) {\r\n            $devPackages = $this->extractDevPackages($operations, $localRepo, $platformRepo, $aliases);\r\n            if (!$this->devMode) {\r\n                $operations = $this->filterDevPackageOperations($devPackages, $operations, $localRepo);\r\n            }\r\n        } else {\r\n            $devPackages = null;\r\n        }\r\n\r\n        foreach ($operations as $operation) {\r\n            // collect suggestions\r\n            if (\'install\' === $operation->getJobType()) {\r\n                // 展示推荐的package\r\n                $this->suggestedPackagesReporter->addSuggestionsFromPackage($operation->getPackage());\r\n            }\r\n\r\n            // updating, force dev packages\' references if they\'re in root package refs\r\n            if ($this->update) {\r\n                $package = null;\r\n                if (\'update\' === $operation->getJobType()) {\r\n                    $package = $operation->getTargetPackage();\r\n                } elseif (\'install\' === $operation->getJobType()) {\r\n                    $package = $operation->getPackage();\r\n                }\r\n                if ($package && $package->isDev()) {\r\n                    $references = $this->package->getReferences();\r\n                    if (isset($references[$package->getName()])) {\r\n                        $this->updateInstallReferences($package, $references[$package->getName()]);\r\n                    }\r\n                }\r\n                if (\'update\' === $operation->getJobType()\r\n                    && $operation->getTargetPackage()->isDev()\r\n                    && $operation->getTargetPackage()->getVersion() === $operation->getInitialPackage()->getVersion()\r\n                    && (!$operation->getTargetPackage()->getSourceReference() || $operation->getTargetPackage()->getSourceReference() === $operation->getInitialPackage()->getSourceReference())\r\n                    && (!$operation->getTargetPackage()->getDistReference() || $operation->getTargetPackage()->getDistReference() === $operation->getInitialPackage()->getDistReference())\r\n                ) {\r\n                    $this->io->writeError(\'  - Skipping update of \'. $operation->getTargetPackage()->getPrettyName().\' to the same reference-locked version\', true, IOInterface::DEBUG);\r\n                    $this->io->writeError(\'\', true, IOInterface::DEBUG);\r\n\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            $event = \'Composer\\Installer\\PackageEvents::PRE_PACKAGE_\'.strtoupper($operation->getJobType());\r\n            if (defined($event) && $this->runScripts) {\r\n                $this->eventDispatcher->dispatchPackageEvent(constant($event), $this->devMode, $policy, $pool, $installedRepo, $request, $operations, $operation);\r\n            }\r\n\r\n            // output non-alias ops in dry run, output alias ops in debug verbosity\r\n            if ($this->dryRun && false === strpos($operation->getJobType(), \'Alias\')) {\r\n                $this->io->writeError(\'  - \' . $operation);\r\n                $this->io->writeError(\'\');\r\n            } elseif ($this->io->isDebug() && false !== strpos($operation->getJobType(), \'Alias\')) {\r\n                $this->io->writeError(\'  - \' . $operation);\r\n                $this->io->writeError(\'\');\r\n            }\r\n\r\n            $this->installationManager->execute($localRepo, $operation);\r\n\r\n            // output reasons why the operation was ran, only for install/update operations\r\n            if ($this->verbose && $this->io->isVeryVerbose() && in_array($operation->getJobType(), array(\'install\', \'update\'))) {\r\n                $reason = $operation->getReason();\r\n                if ($reason instanceof Rule) {\r\n                    switch ($reason->getReason()) {\r\n                        case Rule::RULE_JOB_INSTALL:\r\n                            $this->io->writeError(\'    REASON: Required by the root package: \'.$reason->getPrettyString($pool));\r\n                            $this->io->writeError(\'\');\r\n                            break;\r\n                        case Rule::RULE_PACKAGE_REQUIRES:\r\n                            $this->io->writeError(\'    REASON: \'.$reason->getPrettyString($pool));\r\n                            $this->io->writeError(\'\');\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            $event = \'Composer\\Installer\\PackageEvents::POST_PACKAGE_\'.strtoupper($operation->getJobType());\r\n            if (defined($event) && $this->runScripts) {\r\n                $this->eventDispatcher->dispatchPackageEvent(constant($event), $this->devMode, $policy, $pool, $installedRepo, $request, $operations, $operation);\r\n            }\r\n\r\n            if (!$this->dryRun) {\r\n                $localRepo->write();\r\n            }\r\n        }\r\n\r\n        if (!$this->dryRun) {\r\n            // force source/dist urls to be updated for all packages\r\n            // 处理package url等信息 为后续写入lock做准备\r\n            $this->processPackageUrls($pool, $policy, $localRepo, $repositories);\r\n            $localRepo->write();\r\n        }\r\n\r\n        return array(0, $devPackages);\r\n    }\r\n```\r\n\r\n## 依赖的解决 RuleSetGenerator\r\n\r\n```php\r\n\r\n /**\r\n     * Creates a new rule for the requirements of a package\r\n     *\r\n     * This rule is of the form (-A|B|C), where B and C are the providers of\r\n     * one requirement of the package A.\r\n     *\r\n     * @param  PackageInterface $package    The package with a requirement\r\n     * @param  array            $providers  The providers of the requirement\r\n     * @param  int              $reason     A RULE_* constant describing the\r\n     *                                      reason for generating this rule\r\n     * @param  mixed            $reasonData Any data, e.g. the requirement name,\r\n     *                                      that goes with the reason\r\n     * @return Rule             The generated rule or null if tautological\r\n     */\r\n    protected function createRequireRule(PackageInterface $package, array $providers, $reason, $reasonData = null)\r\n    {\r\n        $literals = array(-$package->id);\r\n\r\n        foreach ($providers as $provider) {\r\n            // self fulfilling rule?\r\n            if ($provider === $package) {\r\n                return null;\r\n            }\r\n            $literals[] = $provider->id;\r\n        }\r\n\r\n        return new Rule($literals, $reason, $reasonData);\r\n    }\r\n\r\n    /**\r\n     * Creates a rule to install at least one of a set of packages\r\n     *\r\n     * The rule is (A|B|C) with A, B and C different packages. If the given\r\n     * set of packages is empty an impossible rule is generated.\r\n     *\r\n     * @param  array $packages The set of packages to choose from\r\n     * @param  int   $reason   A RULE_* constant describing the reason for\r\n     *                         generating this rule\r\n     * @param  array $job      The job this rule was created from\r\n     * @return Rule  The generated rule\r\n     */\r\n    protected function createInstallOneOfRule(array $packages, $reason, $job)\r\n    {\r\n        $literals = array();\r\n        foreach ($packages as $package) {\r\n            $literals[] = $package->id;\r\n        }\r\n\r\n        return new Rule($literals, $reason, $job[\'packageName\'], $job);\r\n    }\r\n\r\n    /**\r\n     * Creates a rule to remove a package\r\n     *\r\n     * The rule for a package A is (-A).\r\n     *\r\n     * @param  PackageInterface $package The package to be removed\r\n     * @param  int              $reason  A RULE_* constant describing the\r\n     *                                   reason for generating this rule\r\n     * @param  array            $job     The job this rule was created from\r\n     * @return Rule             The generated rule\r\n     */\r\n    protected function createRemoveRule(PackageInterface $package, $reason, $job)\r\n    {\r\n        return new Rule(array(-$package->id), $reason, $job[\'packageName\'], $job);\r\n    }\r\n\r\n    /**\r\n     * Creates a rule for two conflicting packages\r\n     *\r\n     * The rule for conflicting packages A and B is (-A|-B). A is called the issuer\r\n     * and B the provider.\r\n     *\r\n     * @param  PackageInterface $issuer     The package declaring the conflict\r\n     * @param  PackageInterface $provider   The package causing the conflict\r\n     * @param  int              $reason     A RULE_* constant describing the\r\n     *                                      reason for generating this rule\r\n     * @param  mixed            $reasonData Any data, e.g. the package name, that\r\n     *                                      goes with the reason\r\n     * @return Rule             The generated rule\r\n     */\r\n    protected function createConflictRule(PackageInterface $issuer, PackageInterface $provider, $reason, $reasonData = null)\r\n    {\r\n        // ignore self conflict\r\n        if ($issuer === $provider) {\r\n            return null;\r\n        }\r\n\r\n        return new Rule(array(-$issuer->id, -$provider->id), $reason, $reasonData);\r\n    }\r\n```\r\n\r\n\r\nA依赖的包是B，B就是provider。A B C 表示包的id\r\n\r\n```\r\n- //createRequireRule\r\n-A | B | C\r\nA ->issue  B C ->providers（提供者）\r\nA依赖于B C\r\n- //createConflictRule\r\n-A | -B\r\nA ->issue  B ->providers（提供者）\r\nA和B冲突\r\n- //createInstallOneOfRule\r\nA | B | C\r\nA B C需要安装\r\n- //createRemoveRule\r\n-A\r\nA需要删除\r\n```\r\n\r\n如果出现-A | B  -B | A 环形依赖，composer会报环形依赖错误。\r\n在做决定时，-A | B | C，如果A要安装，那么B，C需要已经确定安装。意思就是需要从一个无依赖的成品单元来开始做决策。\r\n或者可以这样想 ，composer实现了n个安装包的一个决策树，输入包名，根据规则确定了安装包的版本。',1476434598,1481634277,0,'0'),(24,312,20,'线上升级PHP7','saltstack线上升级PHP7使用的配置，主要做了些操作：\r\n\r\n- 首先加载了一些基础配置\r\n- 通过软链的方式是将php指向新目录\r\n- 覆盖一些常用的配置文件（提前做好备份）\r\n- 安装stomp扩展支持与mq通讯\r\n\r\n下面是配置的一些基本信息：\r\n### install.sls\r\n```\r\ninclude:\r\n   - user.www\r\n   - pkg.pkg-init\r\n php70w-install:\r\n   pkg:\r\n     - name: php70w\r\n     - pkgs:\r\n       - php70w\r\n       - php70w-cli\r\n       - php70w-common\r\n       - php70w-devel\r\n       - php70w-opcache\r\n       - php70w-fpm\r\n       - php70w-mbstring\r\n       - php70w-mcrypt\r\n       - php70w-pdo\r\n       - php70w-intl\r\n       - php70w-gd\r\n       - php70w-pecl-imagick\r\n       - php70w-pear\r\n       - php70w-mysql\r\n       - php70w-xml\r\n       - php70w-devel\r\n       - php70w-bcmath\r\n     - installed\r\n   cmd.run:\r\n     - name: cd /usr/local/bin && ln -s -b /usr/bin/php php && ln -s -b /usr/bin/php-config php-config && ln -s -b /usr/bin/php-cgi php-cgi && ln -s -b /usr/bin/phpize phpize\r\n\r\n /etc/php.ini:\r\n   file.managed:\r\n     - source: salt://php/files/php.ini\r\n     - user: root\r\n     - group: root\r\n     - mode: 644\r\n /etc/php-fpm.d/www.conf:\r\n   file.managed:\r\n     - source: salt://php/files/www.conf\r\n     - user: root\r\n     - group: root\r\n          - mode: 644\r\n /etc/php.d/opcache.ini:\r\n   file.managed:\r\n     - source: salt://php/files/opcache.ini\r\n     - user: root\r\n     - group: root\r\n     - mode: 644\r\n /etc/php.d/stomp.ini:\r\n   file.managed:\r\n     - source: salt://php/files/stomp.ini\r\n     - user: root\r\n     - group: root\r\n     - mode: 644\r\n /home/dev/stomp-2.0.0.tgz:\r\n   file.managed:\r\n     - source: salt://php/files/stomp-2.0.0.tgz\r\n     - user: root\r\n     - group: root\r\n     - mode: 644\r\n   cmd.run:\r\n     - name : cd /home/dev && tar -zxvf stomp-2.0.0.tgz && cd stomp-2.0.0 && phpize && ./configure && make && make install\r\n```\r\n### pkg-init.sls\r\n```\r\n  pkg-init:\r\n   pkg:\r\n     - name: packages\r\n     - pkgs:\r\n       - gcc\r\n       - gcc-c++\r\n       - glibc\r\n       - make\r\n       - autoconf\r\n       - openssl\r\n       - openssl-devel\r\n       - curl\r\n     - installed\r\n     - require:\r\n       - cmd: pkg-init\r\n   cmd.run:\r\n     - name: rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm && rpm -Uvh https://mirror.webtatic.com/yum/el6/latest. rpm\r\n     - unless: test -n \"`rpm -qa epel-release`\"\r\n```\r\n### www.sls\r\n```\r\n  www-user-group:\r\n   group.present:\r\n     - name: www\r\n     - gid: 1000\r\n   user.present:\r\n     - name: www\r\n     - fullname: www\r\n     - shell: /sbin/nologin\r\n     - uid: 1000\r\n     - gid: 1000\r\n dev-user-group:\r\n   group.present:\r\n     - name: dev\r\n     - gid: 1001\r\n   user.present:\r\n     - name: dev\r\n     - fullname: dev\r\n     - shell: /bin/bash\r\n     - uid: 1001\r\n     - gid: 1001\r\n```\r\n',1479344283,1481720160,0,'0'),(25,1,4,'Apache Thrift','- [https://www.ibm.com/developerworks/cn/java/j-lo-apachethrift/](https://www.ibm.com/developerworks/cn/java/j-lo-apachethrift/ \"https://www.ibm.com/developerworks/cn/java/j-lo-apachethrift/\")\r\n\r\n待补充',1481687138,1481716064,0,'0');
/*!40000 ALTER TABLE `blog` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `migration`
--

DROP TABLE IF EXISTS `migration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `migration` (
  `version` varchar(180) NOT NULL,
  `apply_time` int(11) DEFAULT NULL,
  PRIMARY KEY (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `migration`
--

LOCK TABLES `migration` WRITE;
/*!40000 ALTER TABLE `migration` DISABLE KEYS */;
INSERT INTO `migration` VALUES ('m000000_000000_base',1481607214),('m130524_201442_init',1481607218),('m140506_102106_rbac_init',1481704954);
/*!40000 ALTER TABLE `migration` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `auth_key` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `password_hash` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password_reset_token` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `status` smallint(6) NOT NULL DEFAULT '10',
  `created_at` int(11) NOT NULL,
  `updated_at` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `email` (`email`),
  UNIQUE KEY `password_reset_token` (`password_reset_token`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'anruence','updtxZdlZUW2pHkzpWF-8fOjqdldYucA','$2y$13$LabU1pARd2bpT4iDqzp9uuKNNRI7zcd65kTEg2bn5srXHI8OZaKSW',NULL,'anruence@gmail.com',10,1481613023,1481613023),(2,'test','EQZDOHSgQcASMUaAw71jDVUjPPlBUNUz','$2y$13$yL4nrJ5LgFS1shv3hlqbE.ZtoT54gzG1FR37kJLU.roSLj8WNR/Ya',NULL,'test@anruence.com',10,1481703510,1481703510);
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2016-12-15 14:06:43
